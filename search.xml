<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2024/12/14/SpringBoot/"/>
      <url>/2024/12/14/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Spring家族有一套完全，之前学习的Spring5(Spring Framework)，SpringMVC，都是Spring家族的组件，用于解决某一问题的，可以这么说</p><p>Spring家族还有很多的组件，在以前，整合起来会非常的麻烦，要写很多的配置文件，有了SpringBoot就会方便去整合，有了它，可以快速去构建出生产级别的Spring应用</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><ul><li>微服务是一种架构风格</li><li>一个应用拆分成一组小型服务</li><li>每个服务运行在自己的进程里，可独立部署和升级</li><li>服务之间使用轻量级HTTP进行交互</li><li>服务围绕业务功能进行拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言，不同的存储技术</li></ul><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><p>分布式-有了微服务的架构，就必然会有分布式的概念</p><p>分布式的难点：</p><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li><li>…</li></ul><p>分布式难点的解决：</p><ul><li>SpringBoot+SpringCloud</li></ul><h4 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h4><p>应用写出来就会有上云的问题，上云的过程中又会出现很多问题</p><p>难点：</p><ul><li>服务自愈</li><li>弹性伸缩</li><li>服务隔离</li><li>自动化部署</li><li>灰度发布</li><li>流量自理</li><li>…</li></ul><p>解决：</p><ul><li>云原生</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>创建独立的Spring应用</li><li>内嵌web服务器</li><li>自动starter依赖，简化构建配置</li><li>自动配置Spring以及第三方功能</li><li>提供生产级别的监控，健康检查以及外部化配置</li><li>无代码生成，无需编写XML</li><li>对于很多的东西(拿不到源码的Java文件)，不需要再去写配置Bean，直接在配置文件就可以解决</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>迭代快，需要时刻关注变化</p><p>封装太深，内部原理复杂，难以精通</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>多看文档。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">https://docs.spring.io/spring-boot/docs/current/reference/html/</a></p><h1 id="初使用"><a href="#初使用" class="headerlink" title="初使用"></a>初使用</h1><h2 id="Maven版"><a href="#Maven版" class="headerlink" title="Maven版"></a>Maven版</h2><h3 id="父级依赖"><a href="#父级依赖" class="headerlink" title="父级依赖"></a>父级依赖</h3><ul><li>这个项目是父项目，用于依赖管理</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入场景依赖"><a href="#引入场景依赖" class="headerlink" title="引入场景依赖"></a>引入场景依赖</h3><ul><li>这个引入的是SpringBoot的依赖</li><li>这个依赖会把与这个场景相关的依赖全部引入进来，不需要我们自己手动去找依赖！</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写启动程序"><a href="#编写启动程序" class="headerlink" title="编写启动程序"></a>编写启动程序</h3><ul><li>SpringBoot内置了有web服务器，所以说我们不用手动配置Tomcat服务器，直接写个程序启动就行了如下操作</li><li><code>@SpringBootApplication</code>标识这个类是主程序类，用它去启动SpringBoot程序</li><li>这个类里main方法就是用来启动的，写法如下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><ul><li>在resource目录里(资源目录)新建一个<code>application.properties</code>，这一个配置文件可以将web服务器等配置进行修改，具体看官方文档</li><li>如果没需求，这个文件可以不写</li><li>下面demo就是修改服务访问端口的配置</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编写服务"><a href="#编写服务" class="headerlink" title="编写服务"></a>编写服务</h3><ul><li>服务就是控制层</li><li><code>@RestController</code>是<code>@Controller</code>和<code>@ResponseBody</code>的复合注解，标识这是控制层，同时标识这个类下的方法都会给页面一个响应</li><li>有<code>@ResponseBody</code>这个注解，方法返回的字符串就会直接响应在浏览器内容中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello,SpringBoot2"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><ul><li><p>何为简化部署？</p></li><li><ul><li>就是我们不用手动去打jar包(不加配置打出来的jar包是不能够直接运行的)</li><li>SpringBoot为我们提供了maven插件，可以让我们直接打成jar包，然后在终端中直接运行</li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ul><li>启动服务就是将启动程序启动，启动后在浏览器里输入<code>localhost:8888/hello</code>,就会出现<code>Hello,SpringBoot2</code>的页面。</li><li>启动服务可以在IDEA里面启动，也可以在终端中运行jar包</li></ul><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="修改依赖"><a href="#修改依赖" class="headerlink" title="修改依赖"></a>修改依赖</h3><ul><li><p>初使用里面的pom文件里面有个parent标签，那是SpringBoot帮我们在做依赖管理，我们可以依次往上翻，找到真正的父级项目依赖管理</p></li><li><p>在<code>spring-boot-dependencies.pom</code>文件里可以看到SpringBoot帮我们把会用到的依赖都引入了，还有默认版本号</p></li><li><p>如果我们需要自定义依赖版本号，那么就在自己项目的父类项目里按一下方式写</p></li><li><ul><li>具体细节翻看Maven</li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.verson</span><span class="token punctuation">></span></span>8.0.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.verson</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改场景启动器"><a href="#修改场景启动器" class="headerlink" title="修改场景启动器"></a>修改场景启动器</h3><ul><li>初使用项目中，我们看到只引入了<code>spring-boot-starter-web</code>依赖，这个就叫做场景启动器，就是web的依赖，会将web需要的依赖全部导入。</li><li>具体翻源码<code>spring-boot-starter-*</code></li><li><code>*-spring-boot-starter</code>类似这种的就是第三方的场景启动器</li></ul><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ul><li><p>自动配好Tomcat服务器</p></li><li><p>自动配好SpringMVC常用组件</p></li><li><p>自动配好Web常用功能</p></li><li><ul><li>字符编码</li><li>文件上传</li><li>…</li></ul></li><li><p>默认包结构</p></li><li><ul><li>主程序所在的包以及其下面所有子包里的所有被默认扫描</li></ul></li><li><p>各个配置文件拥有默认值</p></li><li><ul><li><code>application.properties</code>文件中的默认配置都会绑定一个类，这个类会在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p></li><li><ul><li>自动配置的依赖在场景启动器的依赖中，名为<code>spring-boot-autoconfigur.jar</code></li><li>这个jar包里有很多的自动配置项，有缓存，aop等等</li><li>但是SpringBoot会根据你引入的 场景启动器去开启需要的，不需要的则会爆红(具体如何实现的后续会讲)</li></ul></li></ul><h1 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h1><h2 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><ul><li>在SpringBoot中，我们要为容器添加bean组件，可以使用纯XML的方式，也可以写配置类，在配置类里引入bean</li><li><code>@Configuration</code>标识在类上，告诉SpringBoot这是一个配置类</li><li>在配置类里对方法使用<code>@Bean</code>注解，这样就可以为容器注册bean组件</li><li>这个方法也是有讲究的，看下面的注释</li><li>详情翻阅Spring笔记</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**     *给容器注册组件     *方法名作为组件id     *返回类型就是组件类型     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="full-lite"><a href="#full-lite" class="headerlink" title="full-lite"></a>full-lite</h4><ul><li>上面的操作注册的组件(bean)是单例模式的，就是单实例对象。</li><li>但我们有时候不需要单实例模式，这样就只需要下面的操作</li><li>默认是true，会创建动态代理</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ComponentScan-Import"><a href="#ComponentScan-Import" class="headerlink" title="@ComponentScan @Import"></a>@ComponentScan @Import</h3><ul><li>在容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</li><li>这种使用方式下就不用</li><li>用在<code>@Configuration</code>注解下面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DBHelper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><ul><li><code>@Conditional</code>及其子注解是用于条件注册组件的</li></ul><h2 id="XML配置文件引入"><a href="#XML配置文件引入" class="headerlink" title="XML配置文件引入"></a>XML配置文件引入</h2><ul><li>我们有时候会遇到写了很多的配置文件，想迁移到配置类里里面，但是太繁琐，这个时候我们就在配置类哪里使用注解将<code>beans.xml</code>引入</li><li>使用下面这个注解，就会把XML文件中配置的bean组件注册到容器中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置绑定-Properties"><a href="#配置绑定-Properties" class="headerlink" title="配置绑定(Properties)"></a>配置绑定(Properties)</h2><ul><li>配置绑定就是将配置文件里面的信息注入到某个类里</li><li>以下两种实现方式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *方案一： *perfix就相当于是这个类的别名 *然后就可以在SpringBoot配置文件里写了 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"mycar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span><span class="token comment">/** *方案二： *在配置类上面使用注解@EnableConfigurationProperties(类名.class) *只在Car类上使用@ConfigurationProperties(prefix = "mycar") */</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>mycar<span class="token punctuation">.</span>brand<span class="token operator">=</span><span class="token constant">BYD</span>mycar<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h1><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><ul><li>Lombok好用，帮我们简化开发，我们的pojo类，可以只写字段，而使用Lombok提供的注解简化</li><li>使用注解后就可以不写构造器，set&#x2F;get方法，toString方法等等，Lombok会在程序编译的时候为我们补上</li><li>记得导包和安装IDEA的lombok插件</li><li>注解不止下面几种，还有别的，比如<code>@Slf4j</code>,用了这个我们就不用在主程序去打印了，直接在类哪里使用<code>log.info()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"mycar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring-Initailizer"><a href="#Spring-Initailizer" class="headerlink" title="Spring Initailizer"></a>Spring Initailizer</h2><p>前面哪个项目是使用maven手动去设置的SpringBoot项目，我们可以继续简化开发，使用Spring的初始化程序去创建项目</p><h2 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h2><p>相当于就是热部署，想用速度快些，添加依赖，Command+F9</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>SpringBoot开发的时候，配置文件有两种</p><p>一种是：properties</p><p>二种是：yaml</p><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>yaml是一种标记语言，类似markdown，html等，非常适合用来做以数据为中心的配置文件</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>key:value，kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系，缩进不允许使用tab，只允许空格</li><li>缩进的空格数不做要求，对齐即可</li><li>#表示注释</li><li>‘’和”” 表示的字符串内容 会被 转义&#x2F;不转义</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">k</span><span class="token punctuation">:</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">行内写法：  k</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>k1<span class="token punctuation">:</span>v1<span class="token punctuation">,</span>k2<span class="token punctuation">:</span>v2<span class="token punctuation">,</span>k3<span class="token punctuation">:</span>v3<span class="token punctuation">&#125;</span><span class="token comment">#或</span><span class="token key atrule">k</span><span class="token punctuation">:</span> <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1  <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2  <span class="token key atrule">k3</span><span class="token punctuation">:</span> v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">行内写法：  k</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">]</span><span class="token comment">#或者</span><span class="token key atrule">k</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> v1 <span class="token punctuation">-</span> v2 <span class="token punctuation">-</span> v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>需要注意的是List就是数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interests<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> animal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> salarys<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span><span class="token punctuation">></span></span> allPets<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>person<span class="token operator">:</span>  user<span class="token operator">-</span>name<span class="token operator">:</span> <span class="token string">"Jsckot"</span>  boss<span class="token operator">:</span> <span class="token boolean">true</span>  birth<span class="token operator">:</span> <span class="token number">2001</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">33</span>  age<span class="token operator">:</span> <span class="token number">20</span>  pet<span class="token operator">:</span>    name<span class="token operator">:</span> <span class="token string">"tomcat"</span>    weight<span class="token operator">:</span> <span class="token number">23.4</span>  interests<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"游泳"</span><span class="token punctuation">]</span>  animal<span class="token operator">:</span>    <span class="token operator">-</span> <span class="token class-name">Jerry</span>    <span class="token operator">-</span> <span class="token class-name">Mario</span>    score<span class="token operator">:</span>    english<span class="token operator">:</span>      first<span class="token operator">:</span> <span class="token number">20</span>      second<span class="token operator">:</span> <span class="token number">40</span>      third<span class="token operator">:</span> <span class="token number">50</span>    math<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">&#125;</span>    chinese<span class="token operator">:</span> <span class="token punctuation">&#123;</span>first<span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>second<span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span>third<span class="token operator">:</span> <span class="token number">65</span><span class="token punctuation">&#125;</span>  salarys<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">6789</span><span class="token punctuation">,</span><span class="token number">9877</span><span class="token punctuation">,</span><span class="token number">7777</span><span class="token punctuation">]</span>  all<span class="token operator">-</span>pets<span class="token operator">:</span>    sick<span class="token operator">:</span>      <span class="token operator">-</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> tom<span class="token punctuation">&#125;</span>      <span class="token operator">-</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> jerry<span class="token punctuation">,</span>weight<span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">&#125;</span>    health<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token class-name">Mario</span><span class="token punctuation">,</span>weight<span class="token operator">:</span> <span class="token number">47.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="yml简化开发"><a href="#yml简化开发" class="headerlink" title="yml简化开发"></a>yml简化开发</h3><p>我们在使用yml以及properties两种文件类型做配置绑定的时候，IDEA不会提醒我们去写类的字段，这时候我们可以使用SpringBoot提供的依赖去辅助我们开发</p><p>tip：这个依赖只是用于方便我们的开发，项目运行并不需要这个，所以我们可以将这个依赖在编译的时候移除是，以免JVM需要加载过多无用的类</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="WEB开发"><a href="#WEB开发" class="headerlink" title="WEB开发"></a>WEB开发</h1><p>WEB开发中，SpringBoot为我们做了很多的自动配置，具体翻看文档</p><h2 id="简单功能"><a href="#简单功能" class="headerlink" title="简单功能"></a>简单功能</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><ul><li>类路径下的<code>/static</code>or<code>/publuc</code>or<code>/resources</code>or<code>/META-INF/resources</code></li><li>只要文件在类的这些目录下，项目启动后就可以通过<code>域名:端口/静态资源名</code>进行访问</li><li>原理：静态映射<code>/**</code></li><li>请求进来先看Controller能否处理，不能处理的则又交给静态资源处理器，就会去指定目录寻找，找不到就404</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1644736696959-6f656abd-6498-45c1-8d3c-3bee8e6cf339.png" alt="img"></p><h4 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h4><ul><li>这个功能挺有用的，上面的操作是默认的，没有前缀，直接使用<code>域名:端口/静态资源名</code></li><li>我们可以进行操作，使其可以按这种路径访问<code>域名:端口/访问前缀/静态资源名</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="自定义资源路径"><a href="#自定义资源路径" class="headerlink" title="自定义资源路径"></a>自定义资源路径</h4><ul><li><p>自定义静态资源路径可以使用自定义的，默认是关闭的，开启后上面的默认静态资源就没用了，就完全按照自定义的路径来</p></li><li><p>开启后就是按照以下的操作来</p></li><li><ul><li>将静态资源文件放到<code>/haha</code>目录下，然后按照自己设定的访问前缀进行访问</li><li>这个路径是一个数组，可以自定义多个资源路径</li></ul></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h3><ul><li>webjars就是就是，比如我们常用的BootStrap，JQuery等等，SpringBoot帮我们封装在了jar包里[<code>jar包其实就是一个压缩包</code>]，然后使用具体路径去访问</li><li><a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></li><li>寻找对应的jar包就去这个网站：<a href="https://www.webjars.org/">https://www.webjars.org/</a></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h3><ul><li><p><code>index.html</code>文件放到静态资源目录下，启动程序的时候就会首先访问这个</p></li><li><ul><li>可以配置自定义静态资源路径</li><li>但是不可以配置静态资源的访问前缀</li></ul></li><li><p>controller也能够处理 &#x2F;index，都会被当成静态页</p></li></ul><h3 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h3><ul><li>Faviocn就是网站在浏览器中访问的时候，浏览器上面的小图</li><li>直接将文件改为<code>favicon.ico</code>,然后放在静态资源目录下即可</li></ul><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><ul><li><p><em>以前：</em></p></li><li><ul><li><em>&#x2F;getUser   获取用户</em>  </li><li><em>&#x2F;deleteUser 删除用户</em>   </li><li><em>&#x2F;editUser  修改用户</em>   </li><li><em>&#x2F;saveUser 保存用户</em></li></ul></li><li><p><em>现在：</em> </p></li><li><ul><li><em>&#x2F;user  GET-获取用户</em>  </li><li><em>&#x2F;user  DELETE-删除用户</em>  </li><li><em>&#x2F;user  PUT-修改用户</em>  </li><li><em>&#x2F;user  POST-保存用户</em></li></ul></li><li><p><em>使用：</em></p></li><li><ul><li><em>先在SpringBoot配置文件中开启隐藏method</em></li><li><em>表单中使用POST请求</em></li><li><em>前端使用隐藏域,name属性为_method</em></li><li><em>请求映射哪里使用</em> <code>method = RequestMethod.GET</code>指定</li></ul></li><li><p>原理：</p></li><li><ul><li>表单提交会带上**_method&#x3D;PUT**</li><li><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</li></ul></li><li><ul><li><ul><li>请求是否正常，并且是POST</li><li>获取到**_method**的值。</li><li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li><li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></li></ul></li></ul></li><li><p><em>注意：这个主要是用于页面开发，所以<strong>在表单请求的时候才会有效</strong>，因为表单只能够有post和get</em></p></li><li><ul><li><em>如果直接http请求，就会直接变成对应的请求方式</em></li></ul></li><li><p><em>使用PostMan等测试工具直接发送DELETE，就会和上一行说得一样，直接会变成DELETE，而不会经过filter</em></p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">hiddenmethod</span><span class="token punctuation">:</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>@RestControllerpublic class HelloController <span class="token punctuation">&#123;</span>    @RequestMapping(value = "/user"<span class="token punctuation">,</span>method = RequestMethod.GET)    public String getUser()<span class="token punctuation">&#123;</span>        return "GET<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span>    @RequestMapping(value = "/user"<span class="token punctuation">,</span>method = RequestMethod.POST)    public String saveUser()<span class="token punctuation">&#123;</span>        return "POST<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span>    @RequestMapping(value = "/user"<span class="token punctuation">,</span>method = RequestMethod.PUT)    public String putUser()<span class="token punctuation">&#123;</span>        return "PUT<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span>    @RequestMapping(value = "/user"<span class="token punctuation">,</span>method = RequestMethod.DELETE)    public String deleteUser()<span class="token punctuation">&#123;</span>        return "DELETE<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/<span class="token important">**上面的操作**/</span>@RestControllerpublic class HelloController <span class="token punctuation">&#123;</span>    @GetMapping("/user")    public String getUser()<span class="token punctuation">&#123;</span>        return "GET<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span>    @PostMapping("/user")    public String saveUser()<span class="token punctuation">&#123;</span>        return "POST<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span>    @PutMapping("/user")    public String putUser()<span class="token punctuation">&#123;</span>        return "PUT<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span>    @DeleteMapping("/user")    public String deleteUser()<span class="token punctuation">&#123;</span>        return "DELETE<span class="token punctuation">-</span>张三";    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改变默认-method"><a href="#改变默认-method" class="headerlink" title="改变默认_method"></a>改变默认_method</h3><ul><li>修改后记得去前端进行连调修改</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Jsckot</span><span class="token punctuation">.</span>thirdweb<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">HiddenHttpMethodFilter</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HiddenHttpMethodFilter</span> methodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodFilter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">"_m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> methodFilter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h3><ul><li>SpringBoot的web层是基于SpringMVC实现的，在Controller的请求方法的参数中，可以传很多的参数来获取信息</li><li>下面介绍的就是一些常用的信息</li></ul><h4 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h4><ul><li><p><code>@PathVariable</code>–路径变量–就是请求路径里的变量 - <code>user/&#123;id&#125;</code></p></li><li><p><code>@RequestHeader</code>–获取请求头信息</p></li><li><p><code>@RequestParam</code>–获取请求参数–就是<code>?携带的信息</code></p></li><li><p><code>@CookieValue</code>–获取cookies</p></li><li><p><code>@RequestBody</code>–获取请求体信息[post请求的数据]</p></li><li><p><code>@RequestAttribute</code>–获取request域信息</p></li><li><p><code>@MatrixVariable</code>–矩阵变量</p></li><li><p>获取的信息都是健值对形式的，可以使用上面的注解将全部的信息或者某一个key的信息获取</p></li><li><p>获取全部就是将获取的信息放在Map中，健值对嘛</p></li><li><p>获取特定的信息就是 将这个key放注解的参数里传给具体的变量</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterTestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/car/&#123;id&#125;/owner/&#123;username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> pv<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userAgent<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><ul><li>参数也可以传ServletAPI参数,比如HttpServlet等等</li></ul><h4 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h4><ul><li>就是传存map，也都是request域</li><li>键值对形</li></ul><h4 id="自定义对象参数-POJO"><a href="#自定义对象参数-POJO" class="headerlink" title="自定义对象参数-POJO"></a>自定义对象参数-POJO</h4><ul><li><p>SpringMVC支持将前端的数据模型封装在Java的类里面，然后前端的数据发起请求后可以通过请求方法直接封装在POJO类对象供后端进行操作</p></li><li><ul><li>支持级联属性，比如下面5，6行的代码</li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/saveuser<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        姓名： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        年龄： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        生日： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2019/12/10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    宠物姓名：&lt;input name="pet.name" value="阿猫"/>&lt;br/>--></span><span class="token comment">&lt;!--    宠物年龄：&lt;input name="pet.age" value="5"/>--></span>        宠物： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pet<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>啊猫,3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>// 下面的代码可以不写，如果需要自定义handle再来写@Beanpublic WebMvcConfigurer webMvcConfigurer() &#123;    // 这是Lamada表达式的写法    return new WebMvcConfigurer() &#123;        @Override        public void addFormatters(FormatterRegistry registry) &#123;            registry.addConverter(new Converter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Pet</span><span class="token punctuation">></span></span>() &#123;                @Override                public Pet convert(String source) &#123;                    if (!StringUtils.isEmpty(source)) &#123;                        Pet pet = new Pet();                        String[] split = source.split(",");                         pet.setName(split[0]);                        pet.setAge(split[1 ]);                    &#125;                    return null;                &#125;            &#125;);        &#125;    &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h2><h3 id="响应JSON"><a href="#响应JSON" class="headerlink" title="响应JSON"></a>响应JSON</h3><ul><li><p>准备工作</p></li><li><ul><li>web场景依赖+jackson.jar</li><li>映射方法上标注<code>@ResponseBody</code>注解</li><li>返回的就是JSON类型</li></ul></li><li><p>上面的测试中，返回的都是XML</p></li></ul><h3 id="响应XML"><a href="#响应XML" class="headerlink" title="响应XML"></a>响应XML</h3><ul><li>将jackson-dataformat-xml.jar的依赖导入进来</li><li>映射方法上标注<code>@ResponseBody</code>注解</li></ul><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><ul><li><p>内容协商就是使用会根据请求头信息获取返回的类型，是json还是xml</p></li><li><p>只不过需要把xml和json对应的依赖导入</p></li><li><p>如果要返回xml，就把请求头的<code>accept</code>改为<code>application/xml</code></p></li><li><p>这样的话就会返回xml格式的数据</p></li><li><ul><li>也可以使用携带参数来实现,开启这个参数就行了</li><li>就像这样<code>http://localhost:8080/saveuser?format=xml</code></li></ul></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">// 开启内容协商<span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>&lt;dependency<span class="token punctuation">></span>    &lt;groupId<span class="token punctuation">></span>com.fasterxml.jackson.dataformat&lt;/groupId<span class="token punctuation">></span>    &lt;artifactId<span class="token punctuation">></span>jackson<span class="token punctuation">-</span>dataformat<span class="token punctuation">-</span>xml&lt;/artifactId<span class="token punctuation">></span>&lt;/dependency<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义内容协商处理"><a href="#自定义内容协商处理" class="headerlink" title="自定义内容协商处理"></a>自定义内容协商处理</h3><ul><li>可以使用WebMvcConfig去定制化SpringMVC功能，需要的时候自己去看文档</li></ul><h2 id="视图解析与模板引擎"><a href="#视图解析与模板引擎" class="headerlink" title="视图解析与模板引擎"></a>视图解析与模板引擎</h2><ul><li><p>视图解析：SpringBoot不再支持JSP，需要引入第三方模板引擎技术去实现页面渲染与跳转</p></li><li><p>常用Thymeleaf</p></li><li><ul><li>文档<a href="https://www.thymeleaf.org/documentation.html">https://www.thymeleaf.org/documentation.html</a></li></ul></li></ul><h3 id="Thymeleaf使用"><a href="#Thymeleaf使用" class="headerlink" title="Thymeleaf使用"></a>Thymeleaf使用</h3><ul><li>导入Thymeleaf的依赖-SpringBoot会为我们配置好Thymeleaf以及模板引擎，视图解析器</li><li>在html页面中引入Thymeleaf的名称空间-可以直接修改IDEA的配置信息</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FreeMaker"><a href="#FreeMaker" class="headerlink" title="FreeMaker"></a>FreeMaker</h3><p>也是一种模板引擎，可以了解一下</p><h3 id="解决表单重复提交"><a href="#解决表单重复提交" class="headerlink" title="解决表单重复提交"></a>解决表单重复提交</h3><ul><li>在使用请求映射的情况下会出现表单重复提交样子，比如这个demo</li><li>因为它是映射的<code>main.html</code>这个文件，如果已经映射了再刷新就会再次发起请求</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> passward<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决方案如下:</li><li>访问&#x2F;login这个请求映射的时候，满足情况的话会带着请求参数直接重定向到具体的页面，而不是请求本身。</li><li>这个点去了解一下请求与重定向等等</li><li></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> passward<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//登录成功重定向到main.html</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/main.html"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽取公共部分"><a href="#抽取公共部分" class="headerlink" title="抽取公共部分"></a>抽取公共部分</h3><ul><li>将公共部分抽取后放到一个html页面中，然后使用<code>th:formtarget</code>命名，再在原页面中引入即可</li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li>拦截器和原生Servlet里面的 Filter功能类似，都是用于拦截的</li></ul><h3 id="HandlerInterceptor接口"><a href="#HandlerInterceptor接口" class="headerlink" title="HandlerInterceptor接口"></a>HandlerInterceptor接口</h3><ul><li><code>HandlerInterceptor接口</code>是拦截器接口，有三个默认方法，用于实现拦截。</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>新建一个类实现拦截器接口，实现拦截的方法</li><li>将拦截器类注入到容器中，在容器中配置拦截以及放行的路径</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span><span class="token string">"fonts/**"</span><span class="token punctuation">,</span><span class="token string">"/images/**"</span><span class="token punctuation">,</span><span class="token string">"/js/**"</span><span class="token punctuation">,</span><span class="token string">"/aa/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                              <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                              <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//登录检查逻辑</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> loginUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//放行</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//拦截住。未登录。跳转到登录页</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"请先登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul><li>SpringBoot将文件上传封装到了Multipart里面了，原理后续专门看，很方便</li></ul><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ul><li><p>前端写好文件上传的表单</p></li><li><ul><li>请求方法使用post</li><li>action使用thymeleaf语法，提交给请求映射</li><li>enctype设置为 <code>multipart/form-data</code></li></ul></li><li><p>后端将请求映射的方法写好，将文件写入目标目录，具体看demo</p></li><li><p>修改SpringBoot配置文件，因为默认上传大小只有1MB</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/upload&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/** *使用注解将前端上传的文件标识 */@PostMapping("/upload")public String upload(@RequestParam("email") String email,                     @RequestParam("username") String username,                     @RequestPart("headerImg") MultipartFile headerImg,                     @RequestPart("photos") MultipartFile[] photos) throws Exception&#123;    log.info("&#123;&#125;---&#123;&#125;---&#123;&#125;---&#123;&#125;---&#123;&#125;",email,username,headerImg.getSize(),photos.length);    if (!headerImg.isEmpty()) &#123;        //获取原文件名        String originalFilename = headerImg.getOriginalFilename();                //使用Multipart的transferTo方法将文件写入目标目录        headerImg.transferTo(new File("/Users/Jsckot/Desktop/upload/"+originalFilename));    &#125;    if (photos.length > 0) &#123;        for (MultipartFile photo : photos) &#123;            if (!photo.isEmpty()) &#123;                String originalFilename = photo.getOriginalFilename();                photo.transferTo(new File("/Users/Jsckot/Desktop/upload//"+originalFilename));            &#125;        &#125;    &#125;        return "redirect:/main.html";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理-TODO"><a href="#异常处理-TODO" class="headerlink" title="异常处理(TODO)"></a>异常处理(TODO)</h2><p>默认情况下SpringBoot提供<code>/error</code>处理所有请求的映射</p><ul><li>对于机器客户端，它将响应json</li><li>对于浏览器，会响应一个页面</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2022-02-18T08:35:42.807+00:00"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">999</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"None"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"No message available"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义页面处理"><a href="#自定义页面处理" class="headerlink" title="自定义页面处理"></a>自定义页面处理</h3><ul><li>自定义处理就是可以在resource&#x2F;templates目录下创建一个error目录，里面放对应的页面，SpringBoot会帮我们自动解析，当遇到访问为5xx或者404的时候就会自动访问页面</li><li>我们也可以通过json将报错栈放到页面上</li><li>5xx表示响应状态码为5开头就会自定响应这个页面</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645174388633-12dcb447-22f1-4b84-932c-58c35a260065.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>section <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"error-wrapper text-center"</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">></span></span><span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">""</span> src<span class="token operator">=</span><span class="token string">"images/500-error.png"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>h2<span class="token punctuation">></span></span><span class="token constant">OOOPS</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h3 th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&#123;message&#125;"</span><span class="token operator">></span><span class="token class-name">Something</span> went wrong<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"nrml-txt"</span> th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&#123;trace&#125;"</span><span class="token operator">></span><span class="token class-name">Why</span> not <span class="token keyword">try</span> refreshing you page<span class="token operator">?</span> <span class="token class-name">Or</span> you can <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>contact our support<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token keyword">if</span> the problem persists<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"back-btn"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@&#123;/main.html&#125;"</span><span class="token operator">></span> <span class="token class-name">Back</span> <span class="token class-name">To</span> <span class="token class-name">Home</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定制异常处理"><a href="#定制异常处理" class="headerlink" title="定制异常处理"></a>定制异常处理</h3><h4 id="处理全局异常"><a href="#处理全局异常" class="headerlink" title="处理全局异常"></a>处理全局异常</h4><ul><li><code>@ControllerAdvice</code>和<code>@ExceptionHandler</code>注解配合使用进行全局异常捕获</li><li><code>@ControllerAdvice</code>继承了<code>@Component</code></li><li><code>@ExceptionHandler</code>注解用于自定全局异常类型</li><li>返回的是视图地址</li><li>这个操作是全局的，全局内遇到后会自动进行响应</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 处理整个web controller异常 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 处理异常     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handlerArithException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span> <span class="token comment">//返回一个视图地址</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ResponseStatus-自定义异常"><a href="#ResponseStatus-自定义异常" class="headerlink" title="@ResponseStatus+自定义异常"></a>@ResponseStatus+自定义异常</h4><ul><li>自定义异常，然后再在程序中抛出这个异常</li><li>reason属性会被封装在message里面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">,</span>reason <span class="token operator">=</span> <span class="token string">"用户数量太多"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTooManyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UserTooManyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserTooManyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义异常解析器"><a href="#自定义异常解析器" class="headerlink" title="自定义异常解析器"></a>自定义异常解析器</h4><ul><li>这是自定义异常解析器，用的不多，配合Order注解可以实现优先级的分配</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerHandlerExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                         <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                                         <span class="token class-name">Object</span> handler<span class="token punctuation">,</span>                                         <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span><span class="token string">"我喜欢的错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原生组件"><a href="#原生组件" class="headerlink" title="原生组件"></a>原生组件</h2><ul><li>原生组件比如Servlet，Filter，Listener等等，注入容器有两种方式</li></ul><h3 id="原生注解➕包扫描"><a href="#原生注解➕包扫描" class="headerlink" title="原生注解➕包扫描"></a>原生注解➕包扫描</h3><ul><li>原生注解就是<code>@WebServlet</code>，再在启动器上面加一个Servlet的包扫描注解</li><li>这样的话就可以通过<code>/myservlet</code>路径进行访问，这个访问是不受Spring拦截器的拦截的，直接访问</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.Jsckot.webtest.servlet"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForthTestApplication</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RegistrationBean注解"><a href="#RegistrationBean注解" class="headerlink" title="RegistrationBean注解"></a>RegistrationBean注解</h3><ul><li>使用RegistBean的话，就必须先写好上面的MyServlet的自定义类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRegistConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyServlet</span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定制Servlet容器"><a href="#定制Servlet容器" class="headerlink" title="定制Servlet容器"></a>定制Servlet容器</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645247315803-40e044e8-589c-4ed5-bfc9-f3e8e412b84d.png" alt="img"></p><h1 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h1><ul><li>数据访问就和数据库挂钩了。</li></ul><h2 id="数据源的自动配置"><a href="#数据源的自动配置" class="headerlink" title="数据源的自动配置"></a>数据源的自动配置</h2><h3 id="JDBC场景"><a href="#JDBC场景" class="headerlink" title="JDBC场景"></a>JDBC场景</h3><ul><li>导入JDBC依赖</li><li>导入数据库驱动-因为SpringBoot也不知道我们需要使用哪个-而且也有版本仲裁</li><li>配置文件写好数据源信息</li><li>再使用JdbcTemplate进行单元测试</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>spring:  datasource:    url: jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC    username: root    password: xxxxxxxxx    driver-class-name: com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用Druid数据库连接池"><a href="#使用Druid数据库连接池" class="headerlink" title="使用Druid数据库连接池"></a>使用Druid数据库连接池</h2><ul><li><p>JDBC依赖是是使用的Hikari的数据库连接，现在整合Druid</p></li><li><p>引入三方的技术，有两种方式</p></li><li><ul><li>自定义-就是将依赖引入，一项项的去写配置</li><li>找对应的starter</li></ul></li></ul><h3 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h3><ul><li><p>导入Druid的依赖</p></li><li><p>新建一个配置类</p></li><li><p>配置连接信息</p></li><li><ul><li>连接信息的话和上面一样，写在SpringBoot的配置文件中</li><li>将配置信息导入到数据库连接池的配置信息中</li></ul></li><li><p>配置Druid监控页面等-根据官方文档</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>spring:  datasource:    url: jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC    username: root    password: xxxxxxx    driver-class-name: com.mysql.cj.jdbc.Driver    filters: stat,wall@Configurationpublic class MyDataSourceConfig &#123;    //配置连接池信息    @ConfigurationProperties("spring.datasource")    @Bean    public DataSource dataSource() throws SQLException &#123;        DruidDataSource druidDataSource = new DruidDataSource();        return druidDataSource ;    &#125;    /**     * 配置监控页     * @return     */    @Bean    public ServletRegistrationBean statViewServlet() &#123;        //配置监控页路径        StatViewServlet statViewServlet = new StatViewServlet();        ServletRegistrationBean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StatViewServlet</span><span class="token punctuation">></span></span> registrationBean = new ServletRegistrationBean&lt;>(statViewServlet,"/druid/*");        //配置监控页访问账号密码        registrationBean.addInitParameter("loginUsername","admin");        registrationBean.addInitParameter("loginPassword","123456");        return registrationBean;    &#125;    /**     * WebStatFilter -用于采集Web-Jdbc关联监控的属性     * 拦截排除的连接，将拦截到的展示在监控平台     * @return     */    @Bean    public FilterRegistrationBean WebStatFilter() &#123;        WebStatFilter webStatFilter = new WebStatFilter();        FilterRegistrationBean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WebStatFilter</span><span class="token punctuation">></span></span> registrationBean = new FilterRegistrationBean&lt;>(webStatFilter);        registrationBean.setUrlPatterns(Arrays.asList("/*"));        registrationBean.addInitParameter("exclusions","*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*");        return registrationBean;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="starter方式"><a href="#starter方式" class="headerlink" title="starter方式"></a>starter方式</h3><ul><li>引入starter-spring-boot-druid</li><li>SpringBoot配置文件中写配置</li><li>SpringBoot会为我们自动配置，不用手写AutoConfig</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>spring:  datasource:    url: jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC    username: root    password: xxxxxxs    driver-class-name: com.mysql.cj.jdbc.Driver    druid:      aop-patterns: com.Jsckot.webtest.*  #监控SpringBean      filters: stat,wall  #sql监控和防火墙      stat-view-servlet:        enabled: true  #开启监控页        login-username: admin  #监控账号        login-password: 123456 #监控密码        reset-enable: false  #不允许重置      web-stat-filter:        enabled: true  #开启url拦截        url-pattern: /*  #拦截的请求        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'  #不拦截的请求      filter:        stat:  对上面filters里面的进行详细配置          slow-sql-millis: 1000          log-slow-sql: true          enabled: true        wall:          enabled: true          config:            delete-allow: false #不允许删表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><ul><li>引入mybatis-spring-boot-starter</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.3-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul><li><p>全局配置文件-自己写好，放在<code>/resource/mybatis</code></p></li><li><p>SqlSessionFactory：【SpringBoot已自动配好，不用再手动进行配置bean操作】</p></li><li><p>SqlSession：【自动配置了SqlSessionTemplate，里面自动组合了SqlSession】</p></li><li><p>Mapper：只要我们写的Mybatis的接口标注了<code>@Mapper</code>注解就会被自动扫描进来</p></li><li><p>超级方便，再自己写好接口和映射文件即可，可以搭配IDEA插件<code>MyBatisX</code>进行使用</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645262377861-c2bffcb9-1c9d-4f83-9def-ee091d7adeab.png" alt="img"></p></li><li><p>操作</p></li><li><ul><li>导入mybatis的starter</li><li>编写mapper接口–(一定要标注<code>@Mapper</code>注解)</li><li>编写sql映射文件并绑定mapper接口</li><li>在<code>application.yml</code>中指xml全局配置文件的位置和mapper映射文件</li></ul></li><li><ul><li><ul><li><code>mybatis-config.xml</code>全局配置文件可以不写，直接使用 <code>mybatis-configuration</code>(application.yml)进行配置</li></ul></li></ul></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#配置MyBatis的规则</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml   <span class="token comment">#全局配置文件，在配置文件里写全局配置</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/<span class="token important">*.xml</span>        <span class="token comment">#mapper映射文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><ul><li>注解模式就是使用注解，不写mapper映射文件，不过只适合简单的sql语句</li></ul><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><ul><li>混合模式就是将配置方式和注解方式 混合使用，简单的sql语句就使用注解，复杂的sql语句就使用配置方式</li></ul><h2 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h2><ul><li><p>引入MyBatis-Plus的starter-【可以不用引入MyBatis的】</p></li><li><ul><li>MyBatis-Plus的mapper映射文件目录，可以不写，因为有默认值 <code>classpath:/mapper/**/*.xml</code>,以后我们就把mapper映射文件放到这里</li></ul></li><li><p>写Mapper接口-将接口继承<code>BaseMapper类</code>，这样的话就能满足基本的CRUD操作</p></li><li><p>MyBatis-Plus的注解也可以完成很多的步骤！！比如TableField</p></li><li><p>…学习MyBatisPlus后再来复习</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><ul><li>SpringBoot2.2.0版本开始引入JUnit5作为单元测试默认库</li><li>和以前的有很大不同</li><li>SpringBoot2.4及以上移除了JUnit4</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645343714494-b8e09c17-6455-4772-bd80-3306e0cd0e9b.png" alt="img"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>引入JUnit的starter依赖</li><li>使用注解<code>@Test</code>，jupiter包下的</li><li>编写方法</li><li>JUnit具有Spring的功能</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645344534561-af5ce01c-8021-4520-a213-dcff6cc551e8.png" alt="img"></p><h3 id="DisplayName注解"><a href="#DisplayName注解" class="headerlink" title="@DisplayName注解"></a>@DisplayName注解</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645345054211-3c4c9453-fc02-47d2-baac-12e476f733a2.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"JUnit5功能测试1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Junit5Test</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"测试displayname注解"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BeforeEach注解"><a href="#BeforeEach注解" class="headerlink" title="@BeforeEach注解"></a>@BeforeEach注解</h3><p>这个注解是用于提示的，每个测试开始前都会提示这句话</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BeforeEach</span><span class="token keyword">void</span> <span class="token function">testBeforeEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试即将开始..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AfterEach注解"><a href="#AfterEach注解" class="headerlink" title="@AfterEach注解"></a>@AfterEach注解</h3><p>和上面的一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterEach</span><span class="token keyword">void</span> <span class="token function">testAfterEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试已经结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="···"><a href="#···" class="headerlink" title="···"></a>···</h3><h2 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h2><p>断言是测试方法中的核心部分，用来对测试需要满足的条件进行验证 </p><p>分为以下几个品类</p><ul><li>检查业务逻辑返回的数据是否合理</li><li>所有测试运行结束以后会有一个详细的测试报告</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1645347461415-3194cee9-c851-4794-bb4d-b0c0a524ec63.png" alt="img"></p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>和断言类似，可以说是假设。</p><p>它不会停止测试，而是抛出这里的异常进行下面的</p><p>具体翻看文档</p><h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><p>翻文档</p><h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><p>翻文档</p><h1 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis中常用的命令</title>
      <link href="/2024/12/14/redis%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%EF%BC%88%E9%9D%9E%E5%B8%B8%E9%AB%98%E9%A2%91%EF%BC%89/"/>
      <url>/2024/12/14/redis%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%EF%BC%88%E9%9D%9E%E5%B8%B8%E9%AB%98%E9%A2%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>今天整理了一下一些基础且高频的redis命令</p><h2 id="redis中的通用命令"><a href="#redis中的通用命令" class="headerlink" title="redis中的通用命令"></a>redis中的通用命令</h2><ul><li>keys * 查看符合模版的所有的key</li><li><em>del</em> 删除一个指定的key</li><li><em>exists</em> 判断key是否存在</li><li><em>expire</em> 给一个key设置有效期，有效期到期时，这个key就会被删除掉</li><li><em>ttl</em> 查看一个key的剩余有效期</li></ul><h2 id="1-string类型"><a href="#1-string类型" class="headerlink" title="1.string类型"></a>1.string类型</h2><ul><li><em>set</em> 添加或者修改已经存在的一个String类型的键值对</li><li><em>get</em> 根据key获取String类型的value</li><li><em>mset</em> 批量添加多个String类型的键值对</li><li><em>mget</em> 批量获取多个String类型的value</li><li><em>incr</em> 让一个整型的key自增1</li><li><em>decr</em> 让一个整型的key自减1</li><li><em>incrby</em> 让一个整型的key自增并指定要增加的大小</li><li><em>decrby</em> 让一个整型的key自减并指定要减少的大小</li><li><em>setnx</em> 添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li><em>setex</em> 添加一个String类型的键值对，并且指定有效期 (set + expire组合)</li></ul><h2 id="2-hash类型"><a href="#2-hash类型" class="headerlink" title="2.hash类型"></a>2.hash类型</h2><ul><li><em>hset</em> 添加或者修改一个hash类型的值.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hset key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hget</em> 获取一个hash类型的值.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hget key field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hmset</em> 批量的添加或者修改hash类型的值.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hmset key field value [field value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hmget</em> 批量的获取hash类型的值.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hmget key field [field ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hgetall</em> 获取所有的hash类型的key.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hgetall key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hincrby</em> 让对应的key的值添加或者减少对应的值（正数添加，负数减少）.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hincrby key field increment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hsetnx</em> 添加一个hash类型的值，如果要添加的key的值已经存在，则不执行，如果存在则执行<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hsetnx key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>hkeys</em> 获取当前hash类型的值的所有的key.<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hkeys key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>一些注意事项</strong><br><em>hmset和hset的用法大体一样，都是用于添加或者修改（批量）hash类型值的，但是返回结果不相同，hset的返回结果是执行影响的行数，而hmset返回结果是ok或者是nil</em></p><h2 id="3-List类型"><a href="#3-List类型" class="headerlink" title="3.List类型"></a>3.List类型</h2><p>Redis中的list类型底层是一个双向链表，所以在操作的时候可以从左或者右进行操作</p><ul><li><em>lpush</em> 从左边添加list类型的值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">lpush key value [value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>lpop</em> 从左边删除list类型的值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">lpop key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>rpush</em> 从右边添加list类型的值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">rpush key value [value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>rpop</em> 从右边删除list类型的值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">rpop key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>lrange</em> 查询list类型的值，要设置起始位置(start)和结束位置(stop)的索引<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">lrange key start stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>blpop和brpop</em> 阻塞式的删除，在使用<em>blpop</em>或者<em>brpop</em>进行删除时，如果list中对应的key有对象时则直接删除，如果没有值并且在规定时间(timeout)内并不会直接结束，而是等待<em>timeout</em>时间过期之后再结束，如果在等待期间有值添加进来会直接进行删除<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">blpop key [key ...] timeout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="4-Set类型"><a href="#4-Set类型" class="headerlink" title="4.Set类型"></a>4.Set类型</h2><ul><li><em>sadd</em> 向set中添加一个或者对个元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sadd key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>srem</em> 从set中删除指定的元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">srem key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>scard</em> 查询set中元素的个数<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">scard key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>smembers</em> 查询set中所有的元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">smembers key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>sismember</em> 判断一个元素是否在set中<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sismember key member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>sinter</em> 求多个key中的交集<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sinter key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>sunion</em> 求多个key的并集<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sunion key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>sdiff</em> 求前面的key-后面的key剩下的元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sdiff key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="5-SortedSet-zSet-类型"><a href="#5-SortedSet-zSet-类型" class="headerlink" title="5.SortedSet(zSet)类型"></a>5.SortedSet(zSet)类型</h2><ul><li><em>zadd</em> 添加一个或者多个元素到zset中，如果已经存在则更新其score值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zadd key score member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zrem</em> 删除zset中的一个元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zrem key member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zscore</em> 获取zset中指定元素的score值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zscore key member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zcard</em> 获取zset中元素的个数<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zcard key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zcount</em> 统计score值在给定范围内所有元素的个数<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zcount key min max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zincrby</em> 让zset中指定元素自增，大小为指定的increment值<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zincrby key increment member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zrange</em> 按照score排序之后，获取指定排名范围内的元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zrange key start stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zrangebyscore</em> 按照score排序之后，获取指定score范围内的元素<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zrangebyscore key min max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zrank</em> 获取zset中指定元素的排名<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">zrank key member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><em>zdiff</em>、<em>zinter</em>、<em>zunion</em> 求差集、交集、并集</li></ul><p>**注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><strong>升序</strong>获取sorted set 中的指定元素的排名：zrank key member</li><li><strong>降序</strong>获取sorted set 中的指定元素的排名：zrevrank key memeber</li></ul>]]></content>
      
      
      <categories>
          
          <category> 非关系型数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客系统</title>
      <link href="/2024/12/14/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/12/14/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="手把手教你搭建个人博客"><a href="#手把手教你搭建个人博客" class="headerlink" title="手把手教你搭建个人博客"></a>手把手教你搭建个人博客</h1><h2 id="在搭建之前先带大家了解一下几款常见的个人博客搭建框架"><a href="#在搭建之前先带大家了解一下几款常见的个人博客搭建框架" class="headerlink" title="在搭建之前先带大家了解一下几款常见的个人博客搭建框架"></a>在搭建之前先带大家了解一下几款常见的个人博客搭建框架</h2><h3 id="1-Hexo框架"><a href="#1-Hexo框架" class="headerlink" title="1.Hexo框架"></a>1.Hexo框架</h3><p>Hexo框架是一个快速、简洁和高效的博客框架。全文采用非常火爆的Markdown语法解析，只需要在几秒内就可以生成静态网页。</p><h3 id="2-wordpress框架"><a href="#2-wordpress框架" class="headerlink" title="2.wordpress框架"></a>2.wordpress框架</h3><p>WordPress使用的是PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。有着许多第三方开发的免费模板，安装方式简单易用。</p><h3 id="3-Typecho框架"><a href="#3-Typecho框架" class="headerlink" title="3.Typecho框架"></a>3.Typecho框架</h3><p>Typecho基于PHP5开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。</p><p>我使用的是Hexo框架搭建的静态博客，至于为什么使用Hexo多搭建，主要是他不需要额外购买服务器部署，搭建非常简单。目前我的博客地址为：<a href="jsckot.top">jsckot.top</a> ，搭建初期有很多不足的地方，目前还正在完善和更新中。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ul><li>本人使用的是Windows系统，所以本文主要是针对windows搭建博客系统。</li></ul><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h3><p>由于Hexo是基于node.js的框架，所以需要用到node.js的里面的工具。</p><p>直接去node.js官网下载，然后傻瓜式安装即可。我这里使用的时 [v14.21.3]版本。</p><p>安装完成之后打开cmd执行</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看是否安装成功。</p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h2><p>由于Hexo是一款静态博客框架，所以我们每次新发布文章时，都需要使用版本控制工具Git进行文章迭代。使我们更好的管理自己的博客系统。</p><p>到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>安装好之后，使用</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看Git的版本号，我使用的是git version 2.37.2.windows.1版本。</p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>由于前面我们已将将Node.js安装好了，可以使用npm命令来安装Hexo。</p><p>我们可以先创建一个文件夹，我这里叫  jsckot_blog  ，然后cd到该文件夹下，右键打开 git bash，当然你也可以用cmd进行操作。</p><p>输入命令</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完之后输入</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看一下版本号。</p><ul><li>恭喜你，所有准备工作已经完成！</li></ul><p>下面进行Hexo的初始化</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo init jsckot_blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>init 后面的名字大家尽量不要使用中文</p><p>然后进入刚刚创建的博客路径，下载依赖</p></li></ul><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">cd jsckot_blognpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>jsckot_blog文件夹中主要有：</p><ul><li><p>node_modules: 依赖包</p></li><li><p>public：存放生成的页面</p></li><li><p>scaffolds：生成文章的一些模板</p></li><li><p>source：用来存放你的文章</p></li><li><p>themes：主题</p></li><li><p>** _config.yml: 博客的配置文件**</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo ghexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时，我们可以打开浏览器输入本地4000端口 <a href="localhost:4000">localhost:4000</a> 访问刚刚创建的博客。</p><p><img src="/img%5Cimage-20230723234401328.png" alt="image-20230723234401328"></p></li></ul><p>想要关闭服务可以使用ctrl+c 关闭本地博客。</p><h3 id="4-在GitHub上创建个人仓库"><a href="#4-在GitHub上创建个人仓库" class="headerlink" title="4.在GitHub上创建个人仓库"></a>4.在GitHub上创建个人仓库</h3><p>相信大家都有github账号，这里就不过多叙述了。</p><p>登录自己的github账号之后，需要创建一个仓库用来存放博客系统。</p><p><img src="/img%5Cimage-20230723235231800.png" alt="image-20230723235231800"></p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img src="/img%5Cimage-20230723235535857.png" alt="image-20230723235535857"></p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5.生成SSH添加到GitHub"></a>5.生成SSH添加到GitHub</h3><p>回到你的git bash中，设置用户名和邮箱，如过之前绑定可以跳过</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建SSH，一直回车即可。</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh-keygen -t rsa -C &quot;youremail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成之后他会告诉我们已经生成了 .ssh的文件夹。</p><p><img src="/img%5Cimage-20230724000133449.png" alt="image-20230724000133449"></p><p>id_rsa.pub就是我们要添加github上的公钥。</p><p>然后我们点击GitHub中的Setting（点击个人头像可以看到），点击左侧 SSH and GPG keys，点击右上角的 New SSH key </p><p><img src="/img%5Cimage-20230724000832440.png" alt="image-20230724000832440"></p><p>将上面提到的 id_rsa.pub 文件中的内容复制到Key中。</p><p>在git bash 中输入命令</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否配置成功。</p><h3 id="6-将Hexo部署到GitHub中"><a href="#6-将Hexo部署到GitHub中" class="headerlink" title="6.将Hexo部署到GitHub中"></a>6.将Hexo部署到GitHub中</h3><p>这里主要将hexo和GitHub关联起来，之后可以将文章放到GitHub中，打开之前生成好的 _config.yml 文件，找到deploy 按照如下配置进行修改，repo可以是你GitHub中存放博客系统的SSH网址路径，也可以是http协议网址，我使用的是SSH网址，之后会很方便。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YourgithubName/YourgithubName.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改完之后，我们将要把博客系统部署到GitHub上了，需要安装一个部署工具，在git base 中输入</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入经典三部曲(之后这三个命令我们经常用到)</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以缩写成hexo c。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>恭喜你，你的博客系统已经部署到了GitHub上。</p><ul><li>这里有一个小坑，我们在部署时写的分支是master，我遇到的情况是在部署时他默认给我上传到了main分支，我们可以在GitHub中修改默认分支为master</li></ul><h3 id="7-设置个人域名（选做）"><a href="#7-设置个人域名（选做）" class="headerlink" title="7. 设置个人域名（选做）"></a>7. 设置个人域名（选做）</h3><p>如果你想让你的个人博客网站更有个性，可以去买一个域名，我购买的是阿里云的域名。</p><p>买完之后我们需要将域名和搭建的博客项目进行绑定，我这里使用的策略是 <a href="https://vercel.com/dashboard">vercel</a> +阿里云域名。</p><p>打开vercel之后，将自己的github账号与vercel进行绑定，</p><p><img src="/img%5Cimage-20230724112341730.png" alt="image-20230724112341730">  </p><p>我这里之前已经绑定过了所以就不演示了，登录成功之后，点击右上角的Add New –&gt;Project 选择博客项目，导入。在Overview界面就可以看到刚刚导入的项目了。点击项目，进入到项目详细界面。</p><p><img src="/img%5Cimage-20230724112758039.png" alt="image-20230724112758039"></p><p>点击Domains 将购买的域名输入到vercel中—&gt;Add 会得到一个需要解析的代码，包含Type Name Value ，将这三个对应的代码添加到我们域名的站点进行解析，之后我们还要在添加一个CNAME类型的解析码。</p><p>到这里就可以直接通过域名直接访问我们的博客了！</p><p>但是还要将博客项目根目录下的_config.yml 中的url改成刚刚设置的域名网址。</p><p>至此，所有项目的部署就结束了！</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis中的5种基础数据结构</title>
      <link href="/2024/12/14/Redis%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
      <url>/2024/12/14/Redis%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-中的5种基础数据结构（重点）"><a href="#Redis-中的5种基础数据结构（重点）" class="headerlink" title="Redis 中的5种基础数据结构（重点）"></a>Redis 中的5种基础数据结构（重点）</h2><p><strong>5种基础数据类型分别是：string（字符串）、hash(字典)、list(列表)、set(集合)、zset(有序集合)</strong></p><h3 id="1-string-字符串-类型"><a href="#1-string-字符串-类型" class="headerlink" title="1. string(字符串) 类型"></a>1. string(字符串) 类型</h3><p>字符串是Redis中最简单的数据结构，他的内部就是一个字符数组（名字不能重复哦），如图所示。</p><p><img src="/img%5Cimage20230803125820.png" alt="image20230803125820"></p><p>  每个string类型的key作为这个数组中的一个名称，每一个唯一的key都对应一个value数据。<strong>不同类型的数据结构的差异就在于key对应的value的结构不一样</strong></p><p>  字符串结构的Redis使用是非常广泛的，比方说我要存一个用户的信息到Redis中，就可以将用户信息（JSON类型的）序列化成字符串，然后将这个字符串作为value放到Redis中作为缓存。在需要获取这个信息时，将之前存的字符串反序列化成JSON类型返回即可。</p><p>  Redis中value为字符串类型的结构，这个字符串类型的结构其实是一个动态的字符串，是可以进行修改的，内部实现类似于Java中的ArrayList，采用的是预分配冗余空间的方式来减少内存的频繁分配，如下图所示，预分配的实际空间capacity 的长度一般要大于实际占用的长度len。当字符串的长度小于1MB时，扩容的大小是当前现有空间的二倍，当字符串长度大于1MB时，扩容时一次长度只会增加1MB的空间。注意字符串的最大长度为512MB。</p><p><img src="/img%5Cimage20230803131517.png" alt="image20230803131517"></p><p><em>如果value的类型是一个整数，那么可以对这个value进行自增操作，但是需要注意，自增是有范围的，他的范围是signed long 的最大值和最小值之间，超过这个数Redis会报错的</em></p><h3 id="2-list-列表-类型"><a href="#2-list-列表-类型" class="headerlink" title="2.list(列表)类型"></a>2.list(列表)类型</h3><p>Redis 中的list相当于Java中的LinkedList，是一个双向链表不是数组。所以他的增删改操作的数据非常快，时间复杂度是O(1)，相对而来带来的问题就是他的查询数据的数据较慢，时间复杂度为O(n)。因为是双线链表，所以支持从前或者从后进行遍历。结构大概如下图所示：</p><p><img src="/img%5Cimage20230807211442.png" alt="image20230807211442"></p><p>如果列表中的最后一个数据也被删除，则该数据结构也会被自动删除，内存被回收。</p><p>正是因为list的这种数据结构，他常被用来做异步队列使用，和之前学过的RabbitMQ很相似。</p><p>双向链表的玩法非常多，比如可以利用链表的方向来实现 <strong>队列（右进左出）</strong>、<strong>栈（右进右出）</strong>；</p><p>可以利用双向链表的索引位置来进行 <strong>慢操作</strong> ，list中有一个方法lindex 用来获取对应索引处的value值，对链表进行索引是需要遍历整个链表的，所以当链表中的数据量越多的时候，使用lindex方法的性能会越来越差。还有一个方法是ltrim方法，他有两个参数 <em>start index</em>  和  <em>end index</em> ，主要作用是将该链表只保留这两个索引之间包括两个索引位置的数据，其他的数据删除。使用该方法时要慎用，因为他也是需要来通过遍历链表来获取对应的索引位置，所有时间复杂度较高为O(n)。</p><p>之前说Redis和LinkedList很像，但是他不单单是一个简单的LinkedList，而是一个 <strong>快速列表（quicklist）</strong> 。当数据较少时，会使用一块连续的内存进行存储，这个结构是ziplist，也叫压缩列表。当数据量较多时才会改成quicklist。这样做的好处相比于普通的双向链表节省了大量的空间，因为普通的双联链表需要附加指针空间。即使是一个简单的数据也要添加 <em>前指针prev</em> 和 <em>后指针next</em> 。quicklist的结构如下图所示。</p><p><img src="/img%5Cimage20230807220719.png" alt="image20230807220719"></p><h3 id="3-hash-字典-类型"><a href="#3-hash-字典-类型" class="headerlink" title="3.hash(字典)类型"></a>3.hash(字典)类型</h3><p>Redis中的hash（字典）相当于Java中的HashMap，他是无序的，都是 <em>数组+链表</em> 的的二维结构。结构如图所示：</p><p><img src="/img%5Cimage20230807223734.png" alt="image20230807223734"></p><p>与普通的HashMap不同的是，Redis中的hash的值只能是字符串类型的，还有他们的rehash的方式不同。Java中的rehash是将所有数据一次性全部rehash，这个是非常耗时的，Redis为了追求好性能采用的是渐进式的rehash，底层用两个数组进行维护，他不会一次性将所有的数据全部转移。当数组达到阈值需要扩容时，他会将数组2的长度设置为数组1的2倍，然后将rehashidx置换成1（默认是-1），之后没尽兴一个增删改查时这个rehashidx都会加1，如果到达的位置上有数据则将该数据转移到数组2中，而新添加的数据是存放在数组2中的，当数组1中的所有元素都转移到数组2中时，他会将之前的数组1置换成数组2，将数组2置换成数组1，然后rehashidx又恢复成-1。这样做的好处就是提高的Redis的性能！</p><p><img src="/img%5Cimage20230807224148.png" alt="image20230807224148"></p><h3 id="4-set-集合-类型"><a href="#4-set-集合-类型" class="headerlink" title="4.set(集合)类型"></a>4.set(集合)类型</h3><p>Redis中的set（集合）相当于Java中的hashset，它内部的键值是 <em>无序的</em> 、 <em>不可重复的</em> 。它内部实现相当于一个特殊的字典，字典中所有的value都是一个值null。</p><p>当集合中的最后一个元素被删除时，该数据结构就会被删除、内存被回收。</p><p>我们经常用set类型存储某个活动中的中奖用户的id，因为不能重复， 可以保证一个用户不能中奖两次。</p><h3 id="5-zset-有序列表-类型"><a href="#5-zset-有序列表-类型" class="headerlink" title="5. zset(有序列表)类型"></a>5. zset(有序列表)类型</h3><p>zset是Redis中特有特点的数据结构。它类似于SortedSet和HashMap的结合体，所以他有着set的特点就是value是唯一的，另一方面他给每个value赋予了一个唯一的score，代表这个value的排序权重。他的内部结构实现是一种 <strong>[[跳跃列表]]</strong> 的数据结构。</p><p><strong>跳跃列表</strong>：</p><p>Redis中的zset（有序列表）的value是一个不重复切有序的数据类型，其底层是一种跳跃列表。</p><p>那么什么是跳跃列表呢？为什么要使用跳跃列表？</p><p>之所以使用跳跃列表是因为zset是一个有序的链表，这也就意味着他每次添加数据的时候都要计算其在底层链表中的位置，一般情况下我们会使用二分法进行定位，但是二分法只能应用于数组所以就使用到了这种和二分法思想非常相似的跳跃列表。</p><p>跳跃列表的底层非常的复杂且巧妙，它实现了数据的分层跳跃操作。比方说我将一些数据使用zset类型添加到Redis中，添加之后如下图中的L0，L0保存了添加的所有数据。跳跃列表的第一个元素是一个 <em>哨兵Sentinel</em> ，作为起始点他不保存数据只是指向下一个数据，进行分层时他会指向下面的第二个元素然后进行一个随机的判断，如果判断结果为 Y 则这个元素就会晋级到L1层，以此类推一直到最后一个元素；当L0的元素都进行判断完之后且L1的元素不唯一时，他会对L1中的每个元素进行判断，直到被筛选出来的那层元素唯一才算分层结束。</p><p>那么向跳跃列表中查询数据是如何实现的呢？<br>他会从最高层L3中的元素和要查询的元素进行比较，如果要查询的元素比L3中的元素小意味着要查询的数据在L3中元素的左边，到L2层时他会送L3层中元素的左边的元素开始判断，以此类推如果找到元素则返回地址，否则会一直向下层找如果找到最下层L0还是没有找到那么就说明该元素不存在！</p><p><img src="/img%5Cimage20230808222706.png" alt="image20230808222706"></p><p>如果向跳跃列表中添加元素？<br>首先会对这个要添加的元素进行判断，直到结果为 N 时判断结束，获取了要填的元素对应的层数。比如说要添加的元素是9 ，如果所示判断结果在L2层，此时将9和起始节点2相比结果比2大则其位置在2的右边所以将9指向2和13，到了L1层因为L1的启示是其又指向了2和11，最后到了L0时将其指向8和11最后插入成功！</p><p><img src="/img%5Cimage20230808224423.png" alt="image20230808224423"></p><p>和其他几种结构一样，当最后一个value被删除后，该数据结构也会被删除，内存被回收。</p><p>zset的应用也非常的广泛，比如说我要做一个关注列表功能就可以用zset，value的值就是粉丝的ID他不可能跟别人重复，粉丝关注的时间可以用score进行排序。</p><h2 id="容器型数据结构通用规则"><a href="#容器型数据结构通用规则" class="headerlink" title="容器型数据结构通用规则"></a>容器型数据结构通用规则</h2><p>Redis中的 <strong>list</strong> 、<strong>hash</strong> 、<strong>set</strong> 、<strong>zset</strong> 的 数据结构都是容器型数据结构，这就意味着如果容器不存在要向容器中添加数据时会先创建该容器，然后在向容器中添加数据。</p><p>当容器中的最后一个元素被删除时，该容器会被删除，内存被回收！</p><h2 id="Redis中的过期时间"><a href="#Redis中的过期时间" class="headerlink" title="Redis中的过期时间"></a>Redis中的过期时间</h2><p>Redis 中的所有数据结构都可以设置过期时间，到了过期时间时删除的是整个对象，而不是对象中的某个值。</p><p><strong>特别的，如果一个Redis类型的数据结构设置了过期时间且在过期时间内对该对象进行了set，那么该对象的过期时间就会消失。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 非关系型数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2024/12/14/RabbitMQstudy/"/>
      <url>/2024/12/14/RabbitMQstudy/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="一-MQ介绍"><a href="#一-MQ介绍" class="headerlink" title="一 MQ介绍"></a>一 MQ介绍</h2><h3 id="1-什么是MQ"><a href="#1-什么是MQ" class="headerlink" title="1.什么是MQ"></a>1.什么是MQ</h3><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO  先入先出，只不过队列中存放的内容是 message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常  见的上下游「逻辑解耦 + 物理解耦」的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。</p><p><img src="/assets%5C1682473534176.png" alt="1682473534176"></p><h2 id="2-MQ的作用"><a href="#2-MQ的作用" class="headerlink" title="2.MQ的作用"></a>2.MQ的作用</h2><h3 id="2-1-流量消峰"><a href="#2-1-流量消峰" class="headerlink" title="2.1 流量消峰"></a>2.1 流量消峰</h3><p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分  散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p><h3 id="2-2-应用解耦"><a href="#2-2-应用解耦" class="headerlink" title="2.2 应用解耦"></a>2.2 应用解耦</h3><p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p><p><img src="/assets%5C1682382912449.png" alt="1682382912449"></p><h3 id="2-3-异步提升效率"><a href="#2-3-异步提升效率" class="headerlink" title="2.3 异步提升效率"></a>2.3 异步提升效率</h3><p>场景说明：用户需发送短信验证码时，点击发送短信，第三方平台发送短信至用户手机成功，执行倒计时60秒。传统的做法有两种 1.串行的方式;2.并行方式：</p><h2 id="3-MQ的分类"><a href="#3-MQ的分类" class="headerlink" title="3.MQ的分类"></a>3.MQ的分类</h2><ul><li><p><strong>ActiveMQ</strong></p><p>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较 低的概率丢失数据</p><p>缺点：官方社区现在对 ActiveMQ 5.x 维护越来越少，高吞吐量场景较少使用</p></li><li><p><strong>Kafka</strong></p><p>大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开  Kafka，这款为大数据而生的消息中间件，以其百万级 TPS  的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被  LinkedIn，Uber，Twitter，Netflix 等大公司所采纳。</p><p>优点: 性能卓越，单机写入 TPS  约在百万条&#x2F;秒，最大的优点，就是吞吐量高。时效性 ms 级可用性非常高，kafka  是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采用 Pull  方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次；有优秀的第三方Kafka Web 管理界面  Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持：功能 较为简单，主要支持简单的 MQ  功能，在大数据领域的实时计算以及日志采集被大规模使用</p><p>缺点：Kafka 单机超过 64 个队列&#x2F;分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新较慢</p></li><li><p><strong>RocketMQ</strong></p><p>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。</p><p>优点：单机吞吐量十万级，可用性非常高，分布式架构,消息可以做到 0 丢失,MQ 功能较为完善，还是分布式的，扩展性好,支持 10 亿级别的消息堆积，不会因为堆积导致性能下降，源码是 java 我们可以自己阅读源码，定制自己公司的 MQ</p><p>缺点：支持的客户端语言不多，目前是 java 及 c++，其中 c++ 不成熟；社区活跃度一般,没有在 MQ 核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码</p></li><li><p><strong>RabbitMQ</strong></p><p>2007 年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><p>优点：由于  erlang 语言的高并发特性，性能较好；吞吐量到万级，MQ 功能比较完备,健壮、稳定、易用、跨平台、支持多种语言  如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX  文档齐全；开源提供的管理界面非常棒，用起来很好用,社区活跃度高；更新频率相当高</p><p>缺点：贵</p></li></ul><h2 id="4-MQ的选择"><a href="#4-MQ的选择" class="headerlink" title="4.MQ的选择"></a>4.MQ的选择</h2><ul><li><p><strong>Kafka</strong></p><p>Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用，如果有日志采集功能，肯定是首选 kafka 了。</p></li><li><p><strong>RocketMQ</strong></p><p>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ  在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。</p></li><li><p><strong>RabbitMQ</strong></p><p>结合 erlang 语言本身的并发优势，性能好时效性微秒级，社区活跃度也比较高，管理界面用起来十分 方便，如果你的数据量没有那么大，中小型公司优先选择功能比较完备的 RabbitMQ。</p></li></ul><h2 id="二-RabbitMQ的基本架构"><a href="#二-RabbitMQ的基本架构" class="headerlink" title="二.RabbitMQ的基本架构"></a>二.RabbitMQ的基本架构</h2><h3 id="1-四大核心概念-类似于快递站"><a href="#1-四大核心概念-类似于快递站" class="headerlink" title="1.四大核心概念[类似于快递站]"></a>1.四大核心概念[类似于快递站]</h3><ul><li><p>生产者<br>产生数据发送消息的程序是生产者</p></li><li><p>交换机<br>交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推<br>送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p></li><li><p>队列 </p><p>队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p></li><li><p>消费者<br>消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费<br>者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p><p><img src="/assets%5C1682475976581.png" alt="1682475976581"></p></li></ul><h3 id="2-RabbitMQ架构"><a href="#2-RabbitMQ架构" class="headerlink" title="2.RabbitMQ架构"></a>2.RabbitMQ架构</h3><p><img src="/assets%5C1682383843615.png" alt="1682383843615"></p><p><code>Broker</code>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker </p><p><code>Virtual host</code>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似 于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出 多个 vhost，每个用户在自己的 vhost 创建 exchange／queue 等 </p><p><code>Connection</code>：publisher／consumer 和 broker 之间的 TCP 连接 </p><p><code>Channel</code>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程 序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客 户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销  </p><p><code>Exchange</code>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发 消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast) </p><p><code>Queue</code>：消息最终被送到这里等待 consumer 取走 </p><p><code>Binding</code>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routingkey，Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h3 id="3-安装Rabbit"><a href="#3-安装Rabbit" class="headerlink" title="3.安装Rabbit"></a>3.安装Rabbit</h3><p>1.官网地址 </p><p><code>https://www.rabbitmq.com/download.html </code></p><p>2.文件上传 </p><p><code>上传到/usr/local/software 目录下(如果没有 software 需要自己创建) </code></p><p>3.安装文件(分别按照以下顺序安装) </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">rpm <span class="token operator">-</span>ivh erlang<span class="token operator">-</span><span class="token number">21.3</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm yum install socat <span class="token operator">-</span>y rpm <span class="token operator">-</span>ivh rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.8</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.常用命令(按照以下顺序执行) </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">添加开机启动 <span class="token class-name">RabbitMQ</span> 服务 chkconfig rabbitmq<span class="token operator">-</span>server on 启动服务 <span class="token operator">/</span>sbin<span class="token operator">/</span>service rabbitmq<span class="token operator">-</span>server start  查看服务状态 <span class="token operator">/</span>sbin<span class="token operator">/</span>service rabbitmq<span class="token operator">-</span>server status 停止服务<span class="token punctuation">(</span>选择执行<span class="token punctuation">)</span> <span class="token operator">/</span>sbin<span class="token operator">/</span>service rabbitmq<span class="token operator">-</span>server stop 开启 web 管理插件 rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management 用默认账号密码<span class="token punctuation">(</span>guest<span class="token punctuation">)</span>访问地址 http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token class-name">RabbitMQ</span>运行的机器的<span class="token constant">IP</span><span class="token operator">:</span><span class="token number">15672</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/assets%5C1682392854308.png" alt="1682392854308"></p><p>4.添加一个新的用户 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">创建账号 rabbitmqctl add_user admin admin 设置用户角色 rabbitmqctl set_user_tags admin administrator 设置用户权限 set_permissions <span class="token punctuation">[</span><span class="token operator">-</span>p <span class="token generics"><span class="token punctuation">&lt;</span>vhostpath<span class="token punctuation">></span></span><span class="token punctuation">]</span> <span class="token generics"><span class="token punctuation">&lt;</span>user<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>conf<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>write<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>read<span class="token punctuation">></span></span> rabbitmqctl set_permissions <span class="token operator">-</span>p <span class="token string">"/"</span> admin <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span> 用户 user_admin 具有<span class="token operator">/</span>vhost1 这个 virtual host 中所有资源的配置、写、读权限 当前用户和角色 rabbitmqctl list_users <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-再次利用-admin-用户登录"><a href="#5-再次利用-admin-用户登录" class="headerlink" title="5.再次利用 admin 用户登录"></a>5.再次利用 admin 用户登录</h3><p><img src="/assets%5C1682393025178.png" alt="1682393025178"></p><h3 id="6-重置命令"><a href="#6-重置命令" class="headerlink" title="6.重置命令"></a>6.重置命令</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">关闭应用的命令为 rabbitmqctl stop_app 清除的命令为rabbitmqctl reset 重新启动命令为 rabbitmqctl start_app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-RabbitMQ入门"><a href="#三-RabbitMQ入门" class="headerlink" title="三.RabbitMQ入门"></a>三.RabbitMQ入门</h2><p><img src="/assets%5C1682393096528.png" alt="1682393096528"></p><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>指定 jdk 编译版本<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>build<span class="token punctuation">></span></span>     <span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">></span></span>         <span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">></span></span>             <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>             <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>             <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">></span></span>                 <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">></span></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>                 <span class="token generics"><span class="token punctuation">&lt;</span>target<span class="token punctuation">></span></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>target<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>rabbitmq 依赖客户端<span class="token operator">--</span><span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>         <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>rabbitmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>         <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>amqp<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>         <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.8</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token constant">IO</span> 工具包<span class="token operator">--</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>     <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.6</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-消息生产者"><a href="#3-2-消息生产者" class="headerlink" title="3.2 消息生产者"></a>3.2 消息生产者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zhyp<span class="token punctuation">.</span>rabbitmq</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个连接工厂</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"182.92.234.71"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//channel 实现了自动 close 接口 自动关闭 不需要显示关闭</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 生成一个队列             * 1.队列名称             * 2.队列里面的消息是否持久化 默认消息存储在内存中             * 3.该队列是否只供一个消费者进行消费 是否进行共享 true 可以多个消费者消费             * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除             * 5.其他参数             */</span>            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 发送一个消息             * 1.发送到那个交换机             * 2.路由的 key 是哪个             * 3.其他的参数信息             * 4.发送消息的消息体             */</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-消息消费者"><a href="#3-3-消息消费者" class="headerlink" title="3.3 消息消费者"></a>3.3 消息消费者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"182.92.234.71"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待接收消息........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//推送的消息如何进行消费的接口回调</span>        <span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//取消消费的一个回调接口 如在消费的时候队列被删除掉了</span>        <span class="token class-name">CancelCallback</span> cancelCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息消费被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 消费者消费消息         * 1.消费哪个队列         * 2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答         * 3.消费者未成功消费的回调         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抽取工具类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> channel <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"182.92.234.71"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> channel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-消息应答-面试题-如何保证消费者消息不丢失"><a href="#3-4-消息应答-面试题-如何保证消费者消息不丢失" class="headerlink" title="3.4 消息应答(面试题:如何保证消费者消息不丢失)"></a>3.4 消息应答(面试题:如何保证消费者消息不丢失)</h3><p><code>RabbitMQ 一旦向消费者传递了一条消息，便立即将该消 息标记为删除。</code>在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续 发送给该消费这的消息，因为它无法接收到。 为了保证消息在发送过程中不丢失，rabbitmq 引入消息应答机制，消息应答就是:消费者在接收 到消息并且处理该消息之后，告诉 rabbitmq 它已经处理了，rabbitmq 可以把该消息删除了。 </p><p><strong>自动应答</strong></p><p>消息发送后立即被认为已经传送成功，这种模式需要在高吞吐量和数据传输安全性方面做权 衡,因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失 了,当然另一方面这种模式消费者那边可以传递过载的消息，没有对传递的消息数量进行限制，当 然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使 得内存耗尽，最终这些消费者线程被操作系统杀死，所以这种模式仅适用在消费者可以高效并以 某种速率能够处理这些消息的情况下使用。</p><p><strong>手动消息应答的方法</strong>    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>Channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>用于肯定确认<span class="token punctuation">)</span>   <span class="token class-name">RabbitMQ</span> 已知道该消息并且成功的处理消息，可以将其丢弃了 <span class="token number">2.</span>Channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>用于否定确认<span class="token punctuation">)</span>  <span class="token number">3.</span>Channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>用于否定确认<span class="token punctuation">)</span>  与 <span class="token class-name">Channel</span><span class="token punctuation">.</span>basicNack 相比少一个参数<span class="token punctuation">(</span>批量应答<span class="token punctuation">)</span> 不处理该消息了直接拒绝，可以将其丢弃了 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Multiple 手动应答</strong></p><p>​手动应答的好处是可以批量应答并且减少网络拥堵  </p><p><img src="/assets%5C1682394301757.png" alt="1682394301757"></p><ul><li><p>multiple 的 true 和 false 代表不同意思 </p><ul><li><p>true 代表批量应答 channel 上未应答的消息 </p><pre><code> 比如说 channel 上有传送 tag 的消息 5,6,7,8 当前 tag 是8 那么此时 5-8 的这些还未应答的消息都会被确认收到消息应答</code></pre></li></ul></li><li><ul><li>false 同上面相比</li></ul></li></ul><p>​ 只会应答 tag&#x3D;8 的消息 5,6,7 这三个消息依然不会被确认收到消息应答</p><p><img src="/assets%5C1682394422798.png" alt="1682394422798"></p><p><img src="/assets%5C1682394435473.png" alt="1682394435473"></p><p><img src="/assets%5C1682394448939.png" alt="1682394448939"></p><h3 id="3-5-消息自动重新入队"><a href="#3-5-消息自动重新入队" class="headerlink" title="3.5 消息自动重新入队"></a>3.5 消息自动重新入队</h3><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息 未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者 可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确 保不会丢失任何消息</p><p><img src="/assets%5C1682395939273.png" alt="1682395939273"></p><h3 id="3-6-消息手动应答代码"><a href="#3-6-消息手动应答代码" class="headerlink" title="3.6 消息手动应答代码"></a>3.6 消息手动应答代码</h3><p>默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应答改 </p><p>为手动应答，消费者在上面代码的基础上增加下面画红色部分代码。 </p><p><img src="/assets%5C1682396032934.png" alt="1682396032934"></p><p><strong>消息生产者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>consumer_ack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token comment">/** * MQ消息生产者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送信息</span>        <span class="token comment">//2.1 创建队列</span>        <span class="token comment">/**         * String queue,  队列名称         * boolean durable, true 队列持久化 false 队列在broker重启删除         * boolean exclusive,  该队列是否为某个消费者专用         * boolean autoDelete, 当没有消费者连接这个队列时 是否自动删除         * Map&lt;String, Object> arguments  其他配置参数         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"queue_name"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2 发送消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"queue_name"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"Hello Rabbit!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>消息消费者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>consumer_ack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CancelCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">DeliverCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token comment">/** * 消息消费者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.读取mq中消息</span>        <span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span>message<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取到消息了: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.消费完毕后必须手动应答,采用的单个消息应答</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">CancelCallback</span> cancelCallback <span class="token operator">=</span> consumerTag <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息取消了: "</span> <span class="token operator">+</span> consumerTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.把自动应答改为手动应答</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"queue_name"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-RabbitMQ-持久化"><a href="#3-7-RabbitMQ-持久化" class="headerlink" title="3.7 RabbitMQ 持久化"></a>3.7 RabbitMQ 持久化</h3><h4 id="3-7-1-概念"><a href="#3-7-1-概念" class="headerlink" title="3.7.1 概念"></a>3.7.1 概念</h4><p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消 息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列 和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：我们需要将队列和消息都标 记为持久化。</p><h4 id="3-7-2-队列如何实现持久化"><a href="#3-7-2-队列如何实现持久化" class="headerlink" title="3.7.2 队列如何实现持久化"></a>3.7.2 队列如何实现持久化</h4><p>之前我们创建的队列都是非持久化的，rabbitmq 如果重启的化，该队列就会被删除掉，如果 要队列实现持久化 需要在声明队列的时候把 durable 参数设置为持久化 </p><p><img src="/assets%5C1682396218835.png" alt="1682396218835"></p><p>但是需要<strong>注意</strong>的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新 </p><p>创建一个持久化的队列，不然就会出现错误 .</p><p><img src="/assets%5C1682396285121.png" alt="1682396285121"></p><p>这个时候即使重启 rabbitmq 队列也依然存在 </p><p> <img src="/assets%5C1682396294506.png" alt="1682396294506"></p><h4 id="3-7-3-消息实现持久化"><a href="#3-7-3-消息实现持久化" class="headerlink" title="3.7.3 消息实现持久化"></a>3.7.3 消息实现持久化</h4><p>要想让消息实现持久化需要在消息生产者修改代码，MessageProperties.PERSISTENT_TEXT_PLAIN 添 加这个属性。 </p><p><img src="/assets%5C1682396362572.png" alt="1682396362572"></p><h3 id="3-8-生产者消息发布确认"><a href="#3-8-生产者消息发布确认" class="headerlink" title="3.8 生产者消息发布确认"></a>3.8 生产者消息发布确认</h3><h4 id="3-8-1-开启发布确认的方法-单条"><a href="#3-8-1-开启发布确认的方法-单条" class="headerlink" title="3.8.1 开启发布确认的方法  (单条)"></a>3.8.1 开启发布确认的方法  (单条)</h4><p>发布确认默认是没有开启的，如果要开启需要调用方法 confirmSelect，每当你要想使用发布确认，都需要在 channel 上调用该方法 </p><p><img src="/assets%5C1682396494539.png" alt="1682396494539"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageIndividually</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启发布确认</span>        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MESSAGE_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//服务端返回 false 或超时时间内未返回，生产者可以消息重发</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> <span class="token constant">MESSAGE_COUNT</span> <span class="token operator">+</span> <span class="token string">"个单独确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-8-2-开启发布确认的方法-批量"><a href="#3-8-2-开启发布确认的方法-批量" class="headerlink" title="3.8.2 开启发布确认的方法  (批量)"></a>3.8.2 开启发布确认的方法  (批量)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * MQ消息生产者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启发布确认</span>        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送信息</span>        <span class="token comment">//2.1 创建队列</span>        <span class="token comment">/**         * String queue,  队列名称         * boolean durable, true 队列持久化 false 队列在broker重启删除         * boolean exclusive,  该队列是否为某个消费者专用         * boolean autoDelete, 当没有消费者连接这个队列时 是否自动删除         * Map&lt;String, Object> arguments  其他配置参数         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"queue_name"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2 发送消息</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"queue_name"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"Hello Rabbit!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.3 接收broker的发布确认</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"批量发消息成功..."</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-交换机"><a href="#3-9-交换机" class="headerlink" title="3.9  交换机"></a>3.9  交换机</h3><p>RabbitMQ 消息传递模型的核心思想是: 生产者生产的消息从不会直接发送到队列。实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中。 相反，生产者只能将消息发送到<strong>交换机(exchange)</strong></p><p><img src="/assets%5C1682397400218.png" alt="1682397400218"></p><h4 id="3-9-0-绑定-bindings"><a href="#3-9-0-绑定-bindings" class="headerlink" title="3.9.0 绑定(bindings)"></a>3.9.0 绑定(bindings)</h4><p><strong>binding</strong> 其实是 exchange 和 queue 之间的桥梁，它告诉我们 exchange 和那个队 列进行了绑定关系。比如说下面这张图告诉我们的就是 X 与 Q1 和 Q2 进行了绑定</p><p><img src="E:/%E7%91%9E%E9%80%9A/rabbitmq/assets/1682397615821.png" alt="1682397615821"></p><h4 id="3-9-1-Exchanges-的类型"><a href="#3-9-1-Exchanges-的类型" class="headerlink" title="3.9.1 Exchanges 的类型"></a>3.9.1 Exchanges 的类型</h4><p><strong>总共有以下类型：</strong> </p><p>​直接(direct), 主题(topic) ,扇出(fanout), 标题(headers) </p><h4 id="3-9-2-Fanout-exchange-扇出交换机"><a href="#3-9-2-Fanout-exchange-扇出交换机" class="headerlink" title="3.9.2 Fanout exchange 扇出交换机"></a>3.9.2 Fanout exchange 扇出交换机</h4><p>Fanout 这种类型非常简单。正如从名称中猜到的那样，它是将接收到的所有消息广播到它知道的 所有队列中。系统中默认有些 exchange 类型 </p><p>  <img src="/assets%5C1682397784720.png" alt="1682397784720"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//声明交换机为fanout</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>生产者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送信息</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">Consumer01</span><span class="token punctuation">.</span>exchange_name<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Hello Rabbit!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UtF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>消费者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">BuiltinExchangeType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">DeliverCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> exchange_name <span class="token operator">=</span> <span class="token string">"fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name1 <span class="token operator">=</span> <span class="token string">"queue_one"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name2 <span class="token operator">=</span> <span class="token string">"queue_two"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取Channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>exchange_name<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">FANOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.创建队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.绑定</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.消费</span>        <span class="token class-name">DeliverCallback</span> okCallBack <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受到消息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>okCallBack<span class="token punctuation">,</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-3-Direct-exchange-Direct交换机"><a href="#3-9-3-Direct-exchange-Direct交换机" class="headerlink" title="3.9.3 Direct exchange Direct交换机"></a>3.9.3 Direct exchange Direct交换机</h4><p>Direct交换机只会将发送到指定的 routingKey 队列中去.</p><p><img src="/assets%5C1682398063758.png" alt="1682398063758"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送信息</span>       channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>exchange_name<span class="token punctuation">,</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>routing_key_1<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"给路由Orange发送的信息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>exchange_name<span class="token punctuation">,</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>routing_key_2<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"给路由black发送的信息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>exchange_name<span class="token punctuation">,</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>routing_key_3<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"给路由green发送的信息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>exchange_direct</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">BuiltinExchangeType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">DeliverCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Delivery</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> exchange_name <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name1 <span class="token operator">=</span> <span class="token string">"Q1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name2 <span class="token operator">=</span> <span class="token string">"Q2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> routing_key_1 <span class="token operator">=</span> <span class="token string">"orange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> routing_key_2 <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> routing_key_3 <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取Channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>exchange_name<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.创建队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.绑定队列和交换机</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span>routing_key_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span>routing_key_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span>routing_key_3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.消费消息</span>        <span class="token class-name">DeliverCallback</span> okCallBack <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受到消息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//消费者1</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>okCallBack<span class="token punctuation">,</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费者2</span>        <span class="token comment">//channel.basicConsume(queue_name2,true,okCallBack,(consumerTag)->&#123;&#125;);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-4-Topics-主题交换机"><a href="#3-9-4-Topics-主题交换机" class="headerlink" title="3.9.4 Topics 主题交换机"></a>3.9.4 Topics 主题交换机</h4><p><strong>Topic 的要求</strong>  </p><p>发送到类型是 topic 交换机的消息的 routing_key 不能随意写，必须满足一定的要求，它必须是一个单 词列表，以<strong>点号</strong>分隔开。这些单词可以是任意单词，比如说：”stock.usd.nyse”, “nyse.vmw”, “quick.orange.rabbit”.这种类型的。当然这个单词列表最多不能超过 255 个字节。 </p><p>在这个规则列表中，其中有两个替换符是大家需要注意的 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token punctuation">(</span>星号<span class="token punctuation">)</span>可以代替一个单词 #<span class="token punctuation">(</span>井号<span class="token punctuation">)</span>可以替代零个或多个单词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Topic 匹配案例</strong> </p><p>下图绑定关系如下 </p><p>Q1–&gt;绑定的是 </p><p>​中间带 orange 带 3 个单词的字符串(<em>.orange.</em>) </p><p>Q2–&gt;绑定的是 </p><p>​最后一个单词是 rabbit 的 3 个单词(<em>.</em>.rabbit) </p><p>​第一个单词是 lazy 的多个单词(lazy.#) </p><p> <img src="/assets%5C1682398342481.png" alt="1682398342481"></p><p><strong>上图是一个队列绑定关系图，我们来看看他们之间数据接收情况是怎么样的</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">quick<span class="token punctuation">.</span>orange<span class="token punctuation">.</span>rabbit 被队列 <span class="token constant">Q1Q2</span> 接收到 lazy<span class="token punctuation">.</span>orange<span class="token punctuation">.</span>elephant 被队列 <span class="token constant">Q1Q2</span> 接收到quick<span class="token punctuation">.</span>orange<span class="token punctuation">.</span>fox 被队列 <span class="token constant">Q1</span> 接收到lazy<span class="token punctuation">.</span>brown<span class="token punctuation">.</span>fox 被队列 <span class="token constant">Q2</span> 接收到lazy<span class="token punctuation">.</span>pink<span class="token punctuation">.</span>rabbit 虽然满足两个绑定但只被队列 <span class="token constant">Q2</span> 接收一次quick<span class="token punctuation">.</span>brown<span class="token punctuation">.</span>fox 不匹配任何绑定不会被任何队列接收到会被丢弃quick<span class="token punctuation">.</span>orange<span class="token punctuation">.</span>male<span class="token punctuation">.</span>rabbit 是四个单词不匹配任何绑定会被丢弃lazy<span class="token punctuation">.</span>orange<span class="token punctuation">.</span>male<span class="token punctuation">.</span>rabbit 是四个单词但匹配 <span class="token constant">Q2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当队列绑定关系是下列这种情况时需要引起注意</strong> </p><p>当一个队列绑定键是#,那么这个队列将接收所有数据，就有点像 fanout 了 </p><p>如果队列绑定键当中没有#和*出现，那么该队列绑定类型就是 direct 了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>exchange_topic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>exchange_direct<span class="token punctuation">.</span></span><span class="token class-name">Consumer1</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送信息</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.rabbit"</span><span class="token punctuation">,</span> <span class="token string">"被队列 Q1Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.orange.elephant"</span><span class="token punctuation">,</span> <span class="token string">"被队列 Q1Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.fox"</span><span class="token punctuation">,</span> <span class="token string">"被队列 Q1 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.brown.fox"</span><span class="token punctuation">,</span> <span class="token string">"被队列 Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.pink.rabbit"</span><span class="token punctuation">,</span> <span class="token string">"虽然满足两个绑定但只被队列 Q2 接收一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.brown.fox"</span><span class="token punctuation">,</span> <span class="token string">"不匹配任何绑定不会被任何队列接收到会被丢弃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.male.rabbit"</span><span class="token punctuation">,</span> <span class="token string">"是四个单词不匹配任何绑定会被丢弃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.orange.male.rabbit"</span><span class="token punctuation">,</span> <span class="token string">"是四个单词但匹配 Q2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> routing_key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> body <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConsumerOne</span><span class="token punctuation">.</span>exchange_name<span class="token punctuation">,</span> routing_key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>exchange_topic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">BuiltinExchangeType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">DeliverCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerOne</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> exchange_name <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name1 <span class="token operator">=</span> <span class="token string">"Q1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name2 <span class="token operator">=</span> <span class="token string">"Q2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> routing_key_1 <span class="token operator">=</span> <span class="token string">"*.orange.*"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> routing_key_2 <span class="token operator">=</span> <span class="token string">"*.*.rabbit"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> routing_key_3 <span class="token operator">=</span> <span class="token string">"lazy.#"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取Channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>exchange_name<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.创建队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.绑定队列和交换机</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span>routing_key_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span>routing_key_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue_name2<span class="token punctuation">,</span>exchange_name<span class="token punctuation">,</span>routing_key_3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.消费消息</span>        <span class="token class-name">DeliverCallback</span> okCallBack <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//消费者1</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue_name1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>okCallBack<span class="token punctuation">,</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费者2</span>        <span class="token comment">//channel.basicConsume(queue_name2,true,okCallBack,(consumerTag)->&#123;&#125;);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-RabbitMQ其他"><a href="#四-RabbitMQ其他" class="headerlink" title="四 RabbitMQ其他"></a>四 RabbitMQ其他</h2><h3 id="4-1-死信的概念"><a href="#4-1-死信的概念" class="headerlink" title="4.1 死信的概念"></a>4.1 死信的概念</h3><p><strong>死信</strong></p><p>顾名思义就是无法被消费的消息，字面意思可以这样理 解，一般来说，producer 将消息投递到 broker 或者直接到queue 里了，consumer 从 queue 取出消息 进行消费，但某些时候由于特定的原因导致 queue 中的某些消息无法被消费</p><p><strong>应用场景:</strong></p><p>为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息 消费发生异常时，将消息投入死信队列中.还有比如说: 用户在商城下单成功并点击去支付后在指定时 间未支付时自动失效 </p><p><strong>死信消息的来源</strong></p><p>消息 TTL 过期 </p><p>队列达到最大长度(队列满了，无法再添加数据到 mq 中) </p><p>消息被拒绝</p><p> <strong>死信实战</strong> </p><p><img src="/assets%5C1682398773088.png" alt="1682398773088"></p><p><strong>生产者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用工具类获取channel对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发信息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span>normal_exchange_name<span class="token punctuation">,</span> <span class="token class-name">Consumer1</span><span class="token punctuation">.</span>normal_routing_key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"info..."</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>消费者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>dead_letter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">BuiltinExchangeType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">DeliverCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Delivery</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RabbitUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> normal_exchange_name <span class="token operator">=</span><span class="token string">"normal_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> normal_queue_name <span class="token operator">=</span><span class="token string">"normal_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dead_exchange_name <span class="token operator">=</span><span class="token string">"dead_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dead_queue_name <span class="token operator">=</span><span class="token string">"dead_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> normal_routing_key <span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dead_routing_key <span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取Channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建正常的交换机和队列</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>normal_exchange_name<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 我们要告知正常队列         * 1.过期时间  什么时候需要把信息变成死信         * 2.死信要发给哪个死信交换机         * 3.设置发送给死信交换机时指定的routing key         */</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>dead_exchange_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span>dead_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>normal_queue_name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.创建死信交换机和队列</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>dead_exchange_name<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>dead_queue_name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.绑定</span>       channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>normal_queue_name<span class="token punctuation">,</span>normal_exchange_name<span class="token punctuation">,</span>normal_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>dead_queue_name<span class="token punctuation">,</span>dead_exchange_name<span class="token punctuation">,</span>dead_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.消费死信队列的数据</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>            dead_queue_name<span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-延迟队列-正常交换机-TTL模拟出来的"><a href="#4-2-延迟队列-正常交换机-TTL模拟出来的" class="headerlink" title="4.2 延迟队列(正常交换机+TTL模拟出来的)"></a>4.2 延迟队列(正常交换机+TTL模拟出来的)</h3><p>延时队列,队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望 在指定时间到了以后或之前取出和处理，简单来说，延时队列就是用来存放需要指定时间被处理的元素的队列。 </p><p><strong>延迟队列使用场景</strong>  </p><p>1.订单在十分钟之内未支付则自动取消 </p><p>2.新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。 </p><p>3.用户注册成功后，如果三天内没有登陆则进行短信提醒。 </p><p>4.用户发起退款，如果三天内没有得到处理则通知相关运营人员。 </p><p>5.预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</p><p>这些场景都有一个特点，需要在某个事件发生之后或者之前的指定时间点完成某一项任务，如： 发生订单生成事件，在十分钟之后检查该订单支付状态，然后将未支付的订单进行关闭；看起来似乎 </p><p>使用定时任务，一直轮询数据，每秒查一次，取出需要被处理的数据，然后处理不就完事了吗？如果 数据量比较少，确实可以这样做，比如：对于“如果账单一周内未支付则进行自动结算”这样的需求， </p><p>如果对于时间不是严格限制，而是宽松意义上的一周，那么每天晚上跑个定时任务检查一下所有未支 付的账单，确实也是一个可行的方案。但对于数据量比较大，并且时效性较强的场景，如：“订单十 分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万 级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单 的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下</p><h3 id="4-3-整合-springboot"><a href="#4-3-整合-springboot" class="headerlink" title="4.3 整合 springboot"></a>4.3 整合 springboot</h3><p><strong>引入依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--RabbitMQ 依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--RabbitMQ 测试依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-rabbit-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改Yaml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring.rabbitmq.host=182.92.234.71spring.rabbitmq.port=5672spring.rabbitmq.username=adminspring.rabbitmq.password=123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TtlQueueConfig</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">X_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_A</span> <span class="token operator">=</span> <span class="token string">"QA"</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_B</span> <span class="token operator">=</span> <span class="token string">"QB"</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEAD_LETTER_QUEUE</span> <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">;</span> <span class="token comment">// 声明 xExchange</span> <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">xExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">X_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 声明 xExchange</span> <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"yExchange"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">yExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//声明队列 A ttl 为 10s 并绑定到对应的死信交换机</span> <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//声明当前队列绑定的死信交换机</span>     args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//声明当前队列的死信路由 key</span>     args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//声明队列的 TTL</span>     args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">QUEUE_A</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 声明队列 A 绑定 X 交换机</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">queueaBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> xExchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"XA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//声明队列 B ttl 为 40s 并绑定到对应的死信交换机</span> <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//声明当前队列绑定的死信交换机</span>     args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//声明当前队列的死信路由 key</span>     args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//声明队列的 TTL</span>     args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">QUEUE_B</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//声明队列 B 绑定 X 交换机</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">queuebBindingX</span><span class="token punctuation">(</span>     <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue1B<span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> xExchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue1B<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"XB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//声明死信队列 QD</span> <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token constant">DEAD_LETTER_QUEUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//声明死信队列 QD 绑定关系</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingQAD</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queueD<span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"yExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> yExchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>yExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生产者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"ttl"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMsgController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"sendMsg/&#123;message&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,发送一条信息给两个 TTL 队列:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XA"</span><span class="token punctuation">,</span> <span class="token string">"消息来自 ttl 为 10S 的队列: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XB"</span><span class="token punctuation">,</span> <span class="token string">"消息来自 ttl 为 40S 的队列: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>消费者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterQueueConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到死信队列信息&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>发起一个请求 http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>ttl<span class="token operator">/</span>sendMsg<span class="token operator">/</span><span class="token class-name">O</span><span class="token punctuation">(</span>∩_∩<span class="token punctuation">)</span><span class="token class-name">O</span>哈哈<span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-幂等性"><a href="#4-4-幂等性" class="headerlink" title="4.4 幂等性"></a>4.4 幂等性</h3><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。 </p><p>举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常， 此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱 了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误 立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等 </p><h4 id="4-4-1-消息重复消费"><a href="#4-4-1-消息重复消费" class="headerlink" title="4.4.1 消息重复消费"></a>4.4.1 消息重复消费</h4><p>消费者在消费 MQ 中的消息时，MQ 已把消息发送给消费者，消费者在给MQ 返回 ack 时网络中断， </p><p>故 MQ 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但 </p><p>实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息。</p><h4 id="4-4-2-解决思路"><a href="#4-4-2-解决思路" class="headerlink" title="4.4.2 解决思路"></a>4.4.2 解决思路</h4><p>MQ 消费者的幂等性的解决一般使用全局 ID 或者写个唯一标识比如时间戳 或者 UUID 或者订单消费 </p><p>者消费 MQ 中的消息也可利用 MQ 的该 id 来判断，或者可按自己的规则生成一个全局唯一 id，每次消费消 息时用该 id 先判断该消息是否已消费过。</p><h4 id="4-4-3-消费端的幂等性保障"><a href="#4-4-3-消费端的幂等性保障" class="headerlink" title="4.4.3 消费端的幂等性保障"></a>4.4.3 消费端的幂等性保障</h4><p>在海量订单生成的业务高峰期，生产端有可能就会重复发生了消息，这时候消费端就要实现幂等性， </p><p>这就意味着我们的消息永远不会被消费多次，即使我们收到了一样的消息。业界主流的幂等性有两种操作:a. </p><p>唯一 ID+指纹码机制,利用数据库主键去重, b.利用 redis 的原子性去实现 </p><h2 id="五-RabbitMQ-集群"><a href="#五-RabbitMQ-集群" class="headerlink" title="五 RabbitMQ 集群"></a>五 RabbitMQ 集群</h2><h3 id="5-1-使用集群的原因"><a href="#5-1-使用集群的原因" class="headerlink" title="5.1 使用集群的原因"></a>5.1 使用集群的原因</h3><p>最开始我们介绍了如何安装及运行 RabbitMQ 服务，不过这些是单机版的，无法满足目前真实应用的 要求。如果 RabbitMQ 服务器遇到内存崩溃、机器掉电或者主板故障等情况，该怎么办？单台 RabbitMQ </p><p>服务器可以满足每秒 1000 条消息的吞吐量，那么如果应用需要 RabbitMQ 服务满足每秒 10 万条消息的吞吐量呢？购买昂贵的服务器来增强单机 RabbitMQ 务的性能显得捉襟见肘，搭建一个 RabbitMQ 集群才是 解决实际问题的关键.</p><h5 id="5-1-1-集群的两种模式"><a href="#5-1-1-集群的两种模式" class="headerlink" title="5.1.1 集群的两种模式"></a>5.1.1 集群的两种模式</h5><p>说到集群，小伙伴们可能第一个问题是，如果我有一个 RabbitMQ 集群，那么是不是我的消息集群中的每一个实例都保存一份呢？</p><p>这其实就涉及到 RabbitMQ 集群的两种模式：</p><ul><li><p><strong>普通集群</strong></p><p>普通集群模式，就是将 RabbitMQ 部署到多台服务器上，每个服务器启动一个 RabbitMQ 实例，多个实例之间进行消息通信。</p><p>此时我们创建的队列 Queue，它的元数据（主要就是 Queue 的一些配置信息）会在所有的 RabbitMQ 实例中进行同步，但是队列中的消息只会存在于一个 RabbitMQ 实例上，而不会同步到其他队列。</p><p><img src="/assets%5Cd8cb4fc480d21184afa8285abcb2511d.png" alt="img"></p></li><li><p><strong>镜像集群</strong></p></li></ul><p>它和普通集群最大的区别在于 消息数据和Queue原数据不再是单独存储在一台机器上，而是同时存储在多台机器上。</p><p><img src="/assets%5C640f79d7e9c47aac744e995757ae22bf.png" alt="img"></p><h3 id="5-2-普通集群搭建步骤"><a href="#5-2-普通集群搭建步骤" class="headerlink" title="5.2 普通集群搭建步骤"></a>5.2 普通集群搭建步骤</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1.修改 3 台机器的主机名称vim /etc/hostname2.配置各个节点的 hosts 文件，让各个节点都能互相识别对方vim /etc/hosts10.211.55.74 node110.211.55.75 node210.211.55.76 node33.以确保各个节点的 cookie 文件使用的是同一个值在 node1 上执行远程操作命令scp /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookiescp /var/lib/rabbitmq/.erlang.cookie root@node3:/var/lib/rabbitmq/.erlang.cookie4.启动 RabbitMQ 服务,顺带启动 Erlang 虚拟机和 RbbitMQ 应用服务(在三台节点上分别执行以下命令)rabbitmq-server -detached5.在节点 2 执行rabbitmqctl stop_app(rabbitmqctl stop 会将Erlang 虚拟机关闭，rabbitmqctl stop_app 只关闭 RabbitMQ 服务)rabbitmqctl resetrabbitmqctl join_cluster rabbit@node1rabbitmqctl start_app(只启动应用服务)6.在节点 3 执行rabbitmqctl stop_apprabbitmqctl resetrabbitmqctl join_cluster rabbit@node2rabbitmqctl start_app7.集群状态rabbitmqctl cluster_status8.需要重新设置用户创建账号rabbitmqctl add_user admin 123设置用户角色rabbitmqctl set_user_tags admin administrator设置用户权限rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"9.解除集群节点(node2 和 node3 机器分别执行)rabbitmqctl stop_apprabbitmqctl resetrabbitmqctl start_apprabbitmqctl cluster_statusrabbitmqctl forget_cluster_node rabbit@node2(node1 机器上执行)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-搭建镜像集群"><a href="#5-3-搭建镜像集群" class="headerlink" title="5.3 搭建镜像集群"></a>5.3 搭建镜像集群</h3><p>所谓的镜像集群模式并不需要额外搭建，只需要我们将队列配置为镜像队列即可。</p><p>镜像队列(Mirror Queue)的机制，可以将队列<strong>镜像</strong>到集群中的其他 Broker 节点之上，如果集群中 的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性</p><p><strong>搭建步骤</strong> </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1.启动三台集群节点2.随便找一个节点添加 policy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets%5C1682399882754.png" alt="1682399882754"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">3.在 node1 上创建一个队列发送一条消息，队列存在镜像队列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets%5C1682399911404.png" alt="1682399911404"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">4.停掉 node1 之后发现 node2 成为镜像队列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets%5C1682399938056.png" alt="1682399938056"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">5.就算整个集群只剩下一台机器了 依然能消费队列里面的消息说明队列里面的消息被镜像队列传递到相应机器里面了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2024/12/14/Linux/"/>
      <url>/2024/12/14/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>TODO</li></ul><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>安装直接在<code>VMware Fusion</code>里面安装centos7.x最小版</p></li><li><ul><li>自定义配置分区</li></ul></li><li><ul><li><ul><li>我要配置分区 - 完成 - 标准分区</li><li>引导分区 - <code>/boot</code> - 1G</li><li>交换分区 - <code>swap</code> - 4G</li><li>根分区 - <code>/</code> - 15G</li></ul></li></ul></li><li><ul><li>网络配置</li></ul></li><li><ul><li><ul><li>修改host名</li><li>开启网络地址转换</li></ul></li></ul></li><li><ul><li>帐密设置</li></ul></li><li><ul><li><ul><li>设置root密码</li><li>创建普通用户</li></ul></li></ul></li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ul><li><p>Linux的文件系统</p></li><li><p>树形层级的目录</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1652172353589-37a3215d-1a9d-4622-af81-b43ed2e67f0e.png" alt="img"></p></li><li><ul><li>此处的bin是一个快捷方式，在<code>/usr/bin</code></li></ul></li></ul><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul><li><p>Linux里面非常重要的文件编辑器，Vi和Vim</p></li><li><p>Vim非常的强大！</p></li><li><p>如果系统没有，就使用<code>yum install vim</code>进行安装</p></li><li><p>模式转换</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1665750449428-f1f8272f-03ce-411f-9abe-11b49944ac49.png" alt="img"></li><li>进入的是一般模式，不能够编辑，但是可以复制、粘贴、删除</li><li>编辑模式就是可以对文件进行编辑-append等等</li><li>命令模式可以执行的操作就是可以对修改后的文档进行保存，退出等操作</li></ul></li><li><p>一般模式命令</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1665759984773-182b32c9-8c69-4814-85ef-7108dea8008b.png" alt="img"></li><li></li></ul></li><li><p>编辑模式命令</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1665759934330-27882324-8e54-4134-964d-e9bf4dd42981.png" alt="img"></li></ul></li><li><p>指令模式命令</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1665760016308-53ff10f8-4cd3-4821-94e0-3017cdb15f9c.png" alt="img"></li></ul></li></ul><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><ul><li><p>桥接模式 - (桥接模式网络连接)</p></li><li><ul><li>虚拟机直接连接外部物理网络的模式，主机起到了网桥的作用。这种模式下，虚拟机可以直接连接外部网络，并且对外部网络是可见的</li><li>桥接网络适配器称为 vmnet0。在 Fusion 3.x 及更高版本中，该适配器使用 vmnet-bridge 和 vmnet-netifup 服务。</li></ul></li><li><p>NAT(网络地址转换)模式 - (Internet共享)</p></li><li><ul><li>虚拟机和主机构建一个专有网络，并通过虚拟网络地址转换设备对IP进行转换。虚拟机通过共享主机IP可以实现访问外部网络，但外部网络无法访问虚拟机</li><li>NAT 网络适配器称为 vmnet8。在 Fusion 3.x 及更高版本中，该适配器使用 vmnet-natd、vmnet-dhcpd 和 vmnet-netifup 服务。</li><li>会虚拟出一个网卡</li></ul></li><li><p>仅主机模式 - (自定)</p></li><li><ul><li>虚拟机只与主机共享一个专有网络，与外部网络无法直接通信</li><li>仅主机网络适配器称为 vmnet1。在 Fusion 3.x 及更高版本中，该适配器使用 vmnet-dhcpd 服务。</li></ul></li></ul><h3 id="静态IP"><a href="#静态IP" class="headerlink" title="静态IP"></a>静态IP</h3><ul><li><p>修改静态IP-而非DHCP进行分配</p></li><li><ul><li><code>cd sysconfig/network-scripts/</code> - 切换目录</li><li><code>vim ifcfg-ens33</code> - 修改配置文件</li><li><code>service network restart </code></li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"Ethernet"</span><span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span><span class="token string">"static"</span>   // 修改为静态<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span><span class="token string">"stable-privacy"</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"ens33"</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"79898376-c7f6-44f1-9758-e6129fd7a033"</span><span class="token assign-left variable">DEVICE</span><span class="token operator">=</span><span class="token string">"ens33"</span><span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token comment"># 配置以下信息</span><span class="token comment"># IP地址</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.212.142<span class="token comment"># 子网掩码</span><span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token number">255.255</span>.255.0<span class="token comment"># 网关</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.212.2<span class="token comment"># DNS解析</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">223.5</span>.5.5<span class="token assign-left variable">DNS2</span><span class="token operator">=</span><span class="token number">223.6</span>.6.6<span class="token assign-left variable">DNS3</span><span class="token operator">=</span><span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><ul><li>查看主机名 - <code>hostname</code></li><li>修改主机名 - <code>vim /etc/hostname</code>或者<code>hostnamectl set-hostname xxx</code></li><li>修改hosts文件 - <code>vim /etc/hosts</code> - 里面相当于是通讯录，一个IP对应一个名称，下次ping就可以直接使用名字</li></ul><h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><ul><li><p>远程登录很简单</p></li><li><ul><li>一是终端使用ssh</li><li>二是使用ssh远程工具</li></ul></li><li><p>ssh</p></li><li><ul><li><code>ssh 用户名@地址</code></li><li>然后按提示来就行</li><li>地址可以是域名，别名或者IP</li></ul></li></ul><h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><ul><li><p>Linux中常驻内存的进程被称为service</p></li><li><p>centos6</p></li><li><ul><li>基本语法- <code>service 服务名 xxx </code></li><li>查看服务 - <code>ll /etc/init.d</code> - centos6</li></ul></li><li><p>centos7 - 主</p></li><li><ul><li>基本语法 - <code>systemctl start|restart|status|stop 服务名</code></li><li>查看服务 - <code>ll /usr/lib/systemd/system</code> - centos</li><li><code>service</code>结尾就都是服务文件</li></ul></li><li><p>配置开机自启动</p></li><li><ul><li><code>chkconfig 服务名 on</code> - centos6</li><li><code>systemctl disable/enable 服务名,service</code> - centos7</li></ul></li><li><p>关机</p></li><li><ul><li><code>shutdown</code> - 等一分钟关机</li></ul></li><li><ul><li><ul><li><code>-c</code> - 结束刚才一分钟并取消关机</li><li><code>-r</code> - 重启</li><li><code>-H</code> - 关机)</li></ul></li></ul></li><li><ul><li><code>halt</code> - 关闭系统，但不断电</li><li><code>poweroff</code> - 关机，断电</li><li><code>reboot</code> - 重启</li><li><code>sync</code> - 将数据由内存同步到硬盘中</li></ul></li></ul><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><ul><li><p>Shell就是终端，Linux里面有很多以sh结尾的文件就是</p></li><li><p>常用的shell就是工具有 <code>bash</code>、<code>zsh</code>等等</p></li><li><p>帮助命令 - </p></li><li><ul><li><code>man [命令/配置文件]</code></li><li><code>help 命令</code> - 内置命令</li><li><code>命令 --help</code> - 外置命令</li></ul></li><li><p>常用快捷键</p></li><li><ul><li><code>ctrl + c</code> - 退出shell</li><li><code>ctrl + l</code> - 清屏 - clear</li></ul></li></ul><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><ul><li><p><code>pwd</code> - 打印工作目录</p></li><li><p><code>ls</code> -列出当前目录文件以及文件夹</p></li><li><p><code>mkdir xxx</code> - 当前目录下新建一个xxx的目录</p></li><li><ul><li><code>mkdir -p a/b/c</code> - 父目录下创建</li><li><code>rmdir -p a b</code> - 删除目录a和b(有文件也删除)</li></ul></li><li><p><code>cp source dist</code> - 复制文件或者目录</p></li><li><p><code>touch xxx</code> - 当前目录新建一个xxx的文件</p></li><li><p><code>rm fileName</code> - 删除文件</p></li><li><ul><li><code>-f</code> - 强制删除</li><li><code>-r</code> - 删除文件夹</li><li><code>-rf</code> - 删除文件夹包括其子目录所有东西</li></ul></li><li><p><code>mv filename dist</code> - 移动目录</p></li><li><p><code>cat filename</code> - 查看文件内容</p></li><li><ul><li><code>-n</code> - 显示行号</li><li><code>more filename</code>&#x2F;<code>less filename</code></li></ul></li><li><p><code>echo &quot;hhh&quot;</code> - 将xxx输出到控制台</p></li><li><ul><li><code>-e</code> - 可以使用转译字符</li><li><code>echo -e &quot;hello \n world&quot; &gt; hello.txt</code> - 覆盖文件</li><li><code>echo -e &quot;hello \n world&quot; &gt;&gt; hello.txt</code> - 追加文件</li></ul></li><li><p><code>haed -n filename</code> - 显示文件头n行内容，默认10行</p></li><li><p><code>tail -n filename</code> - 显示文件尾n行内容，默认10行</p></li><li><ul><li><code>-f</code>可以实时更新追踪</li></ul></li><li><p><code>ln -s source dist </code> - 软链接，快捷方式</p></li></ul><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><ul><li><code>date +%Y-%m-%d</code> - 按格式要求显示时间信息</li><li><code>cat</code> - 查看日历</li></ul><h2 id="用户管理类"><a href="#用户管理类" class="headerlink" title="用户管理类"></a>用户管理类</h2><ul><li><p>Linux是一个多用户多任务的分时操作系统</p></li><li><p><code>useradd username</code> - 添加新用户（可以去看<code>/home</code>下看） - 可以指定主目录</p></li><li><p><code>passwd username</code> - 给用户设置密码</p></li><li><p><code>userdel -r filename</code> - 删除指定用户</p></li><li><p><code>sudo</code> - 让普通用户有roo权限</p></li><li><ul><li>在<code>/etc/sudoers</code>里面可以为用户分配权限</li></ul></li><li><p>组</p></li><li><ul><li>默认创建的用户属于自己的组，每个用户可以加入多个组</li><li><code>groupadd</code></li><li><code>usermod -g groupname username</code> - 加入组</li><li><code>whele</code>组是类似于管理员的组</li></ul></li><li></li></ul><h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><ul><li>TODO：这里去看文件</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666166045077-16bed38f-1340-4da7-8252-49af1f686ac1.png" alt="img"></li><li><code>chmod </code></li><li><code>chown</code> -</li></ul><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><ul><li><p><code>find disk -name filename</code> - 查找某个文件，当前目录下</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666238466147-c83c325c-eecd-4397-8b5b-89c5f69f1560.png" alt="img"></li></ul></li><li><p><code>locate xxx</code></p></li><li><p><code>which xxx</code> - 查找命令位置</p></li><li><p><code>grep</code> - 管道符，用于过滤</p></li><li><ul><li><code>grep -n test filename</code> - 查找文件里面有test关键字的行</li><li><code>ls | grep .cfg</code> - 列出当前 目录所有以cfg结尾的文件</li></ul></li></ul><h2 id="压缩解压类"><a href="#压缩解压类" class="headerlink" title="压缩解压类"></a>压缩解压类</h2><ul><li><p><code>gzip file</code> - 压缩文件</p></li><li><ul><li>只能压缩文件，不能压缩目录</li><li>压缩不保留原文件</li><li>同时压缩多个文件会生成多个压缩包</li><li>所以不常用</li></ul></li><li><p><code>gzip file.zip</code> - 解压文件</p></li><li><p><code>zip/unzip</code></p></li><li><p><code>tar [options] xxx.tar.gz</code></p></li><li><ul><li>一定要好好看下面的参数</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666241258538-7c235c33-0963-4b6e-a89a-3cb39c58e9f2.png" alt="img"></li></ul></li></ul><h2 id="磁盘管理类"><a href="#磁盘管理类" class="headerlink" title="磁盘管理类"></a>磁盘管理类</h2><ul><li><p><code>du</code></p></li><li><ul><li>查看目录下文件大小总和等等</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666247027326-e3f0f94d-2193-4cf8-b8b7-a7b8fd572f07.png" alt="img"></li></ul></li><li><p><code>df</code>等剩余几个命令去查文档</p></li><li><p><code>mount/unmount</code> - 挂载命令</p></li><li><p>硬盘分区</p></li><li><p>Linux</p></li></ul><h2 id="进程管理类"><a href="#进程管理类" class="headerlink" title="进程管理类"></a>进程管理类</h2><ul><li><p><code>ps</code> - process status - 查看当前用户&#x2F;shell进程</p></li><li><ul><li><code>ps aux</code> - 常用</li><li>可以使用管道</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666250743775-b58a6f33-9fc3-4727-8ab1-0c5e5f69deb4.png" alt="img"></li></ul></li><li><p><code>kill PID</code> - 杀进程</p></li><li><p><code>pstree</code> - 查看当前进程的进程树</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666252336712-a50fc2c2-c51a-45f7-afdb-290cac27d62f.png" alt="img"></li></ul></li><li><p><code>top</code> - 实时监控</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666252933346-f0eb84e1-7349-42c0-a09e-2f7dadbc15ed.png" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666253052918-24db4fa3-edec-4484-ba84-64cd1b5201d3.png" alt="img"></li></ul></li><li><p><code>netstat</code> - 查看网络状态和端口占用信息</p></li><li><ul><li><code>netstat -anp | grep PID</code></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666253513205-0a1d65a2-614d-4b78-ba08-8197eb255516.png" alt="img"></li></ul></li><li><p>定时任务</p></li><li><ul><li><code>crontab</code> - 具体怎么用去看文档</li></ul></li></ul><h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><ul><li>Linux里面有很多的包管理工具，Centos这边是RPM和YUM</li></ul><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><ul><li><p>RPM -<code>Redhat Package Manager</code> - 软件包管理工具</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1666256606623-d5bc1049-159f-4ca1-8e6f-d70e9f9c519b.png" alt="img"></p></li><li><p><code>rpm -qa</code> - 查询所有已安装的RPM软件包</p></li><li><p><code>rpm -qi xxx</code> - 查询有没有被安装</p></li><li><p><code>rpm -e xxx</code> - 移除xxx软件包</p></li><li><p><code>rpm -i xxx</code> - 安装xxx软件包</p></li><li><ul><li><code>-ivh</code></li></ul></li></ul><h2 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h2><ul><li>yum相比于rpm最大的特点就是不需要进行依赖</li><li><code>yum install -y xxx</code></li><li><code>yum update -y xxx</code></li><li><code>yum remove -y xxx</code></li><li><code>yum list</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的Markdown语法</title>
      <link href="/2024/12/14/Markdown%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/12/14/Markdown%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>MD常用的语法：</p><h1 id="一级标题（-一级标题名字）"><a href="#一级标题（-一级标题名字）" class="headerlink" title="一级标题（# 一级标题名字）"></a>一级标题（# 一级标题名字）</h1><h2 id="二级标题（-二级标题名字）"><a href="#二级标题（-二级标题名字）" class="headerlink" title="二级标题（## 二级标题名字）"></a>二级标题（## 二级标题名字）</h2><h3 id="三级标题（-三级标题名字）"><a href="#三级标题（-三级标题名字）" class="headerlink" title="三级标题（### 三级标题名字）"></a>三级标题（### 三级标题名字）</h3><h4 id="四级标题（-四级标题名字）"><a href="#四级标题（-四级标题名字）" class="headerlink" title="四级标题（#### 四级标题名字）"></a>四级标题（#### 四级标题名字）</h4><h5 id="五级标题（-五级标题名字）"><a href="#五级标题（-五级标题名字）" class="headerlink" title="五级标题（##### 五级标题名字）"></a>五级标题（##### 五级标题名字）</h5><h6 id="六级标题（-六级标题名字）"><a href="#六级标题（-六级标题名字）" class="headerlink" title="六级标题（###### 六级标题名字）"></a>六级标题（###### 六级标题名字）</h6><p>ctrl+t 表格</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><em>斜体</em>（* 要斜体的内容 *）</p><p><strong>加粗</strong>（** 要加粗内容 **）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 代码块</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Sysytem</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm Jsckot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（&#96;&#96;&#96;加要输入的代码的格式）</p><p>$ x+y$ （$公式$）</p><p>$$ 公式块 $$</p><p>上标^1^</p><p>下标 <del>1</del></p><p>列表(序号前面一个小空格，点后面一个小空格)</p><p>1.<br>2. </p><ul><li>（- 要输入的内容）</li></ul><p>代办(- [ ] 代办事项的内容)</p><ul><li><input disabled="" type="checkbox"> 代办事项</li><li><input checked="" disabled="" type="checkbox"> 123</li></ul><p>图像：(cv即可，比较方便)</p><p><img src="C:\Users\34136\AppData\Roaming\Typora\typora-user-images\image-20230729200002358.png" alt="image-20230729200002358"></p><p>分割线（— 加 回车）</p><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ实战</title>
      <link href="/2024/12/14/RabbitMQ/"/>
      <url>/2024/12/14/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><ul><li><p>通讯分为同步和异步</p></li><li><ul><li>同步就相当于是微信视频，实时更新，两个人只能够单线</li><li>异步就相当于微信聊天，不用实时回复，也可以同时和很多个人发消息</li></ul></li><li><p>同步问题</p></li><li><ul><li>同步调用在微服务中存在很多问题</li><li>耦合度高</li><li>性能下降</li><li>资源浪费</li><li>级联失败</li></ul></li><li><p>异步调用</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657190372845-cfbf9142-313e-4a02-9612-035906e1a036.png" alt="img"></li><li>Broker就是消息队列，只发消息</li></ul></li></ul><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><ul><li>MQ就是MessageQueue，消息队列，是事件驱动架构中Broker</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接使用Docker进行安装</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">docker run \ -e RABBITMQ_DEFAULT_USER=aomsir \ -e RABBITMQ_DEFAULT_PASS=123456 \ -v mq-plugins:/plugins \ --name mq \ -p 15672:15672 \ -p 5672:5672 \ -d \ rabbitmq:3.8-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><ul><li>官方DEMO：<a href="https://rabbitmq.com/getstarted.html">https://rabbitmq.com/getstarted.html</a></li></ul><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657195271111-f7c999bd-9804-4dba-bdf1-4fdd8b3e7387.png" alt="img"></li><li>直接使用课程提供的demo</li><li>写两个测试类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublisherTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.建立连接</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"aomsir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.2.建立连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.创建通道Channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.创建队列</span>        <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.发送消息</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"hello, rabbitmq!"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送消息成功：【"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5.关闭通道和连接</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.建立连接</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"aomsir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.2.建立连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.创建通道Channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.创建队列</span>        <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.订阅消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span>                                       <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 5.处理消息</span>                <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息：【"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待接收消息。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h1><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657196074276-4976ae1c-c7c4-4e03-9f2d-e926c9989060.png" alt="img"></li><li>使用这个框架以后就可以简化MQ的使用，不向上面的操作那样</li></ul><h2 id="HelloWorld-1"><a href="#HelloWorld-1" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li>引入依赖</li><li>写配置文件</li><li>消费者写监听配置类</li><li>写单元测试</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--AMQP依赖，包含RabbitMQ--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>spring:  rabbitmq:    host: localhost    port: 5672    virtual-host: /    username: aomsir    password: 123456@SpringBootTest@RunWith(SpringRunner.class)public class SpringAmqpTest &#123;    @Autowired    private RabbitTemplate rabbitTemplate;    @Test    public void testSendMessage2SimpleQueue() &#123;        String queueName = "simple.queue";        String message = "Hello, Spring AMQP";        rabbitTemplate.convertAndSend(queueName, message);    &#125;&#125;@Componentpublic class SpringRabbitListener &#123;    @RabbitListener(queues = "simple.queue")    public void listenSimpleQueue(String msg) &#123;        System.out.println("消费者接收到simple.queue的消息：【"+ msg +"】");    &#125;&#125;直接运行Application即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WorkQueue"><a href="#WorkQueue" class="headerlink" title="WorkQueue"></a>WorkQueue</h2><ul><li><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657257569918-bd39b9e2-50a4-4b8d-87e9-4c7fe246304b.png" alt="img"></p></li><li><p>队列里的消息是阅后即焚的，只要有一个消费者接受救焚毁了</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657257622687-60513fff-aef6-4a0f-ad3a-960ef025518c.png" alt="img"></p></li><li><p>它的操作逻辑是轮询的，不会管你有没有处理完，所以会导致消费者堵塞，需要给消费者进行设置yml文件配置</p></li><li><ul><li>这样的话时间就会压缩</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenWorkQueue1</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1接收到simple.queue的消息：【"</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenWorkQueue2</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2接收到simple.queue的消息：【"</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage2WorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello, message__"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>logging<span class="token operator">:</span>  pattern<span class="token operator">:</span>    dateformat<span class="token operator">:</span> <span class="token constant">MM</span><span class="token operator">-</span>dd <span class="token constant">HH</span><span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token operator">:</span><span class="token constant">SSS</span>spring<span class="token operator">:</span>  rabbitmq<span class="token operator">:</span>    host<span class="token operator">:</span> localhost    port<span class="token operator">:</span> <span class="token number">5672</span>    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    username<span class="token operator">:</span> aomsir    password<span class="token operator">:</span> <span class="token number">123456</span>    listener<span class="token operator">:</span>      simple<span class="token operator">:</span>        prefetch<span class="token operator">:</span> <span class="token number">1</span> # 每次只能得到一条消息，处理完<span class="token constant">ACK</span>后才能够获取下一个消息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish&#x2F;Subscribe"></a>Publish&#x2F;Subscribe</h2><ul><li>这是发布&#x2F;订阅机制</li><li>和之前的区别就是：允许将同一条消息发送给多个消费者</li><li>实现方式：加入exchange交换机</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657259394690-7e77dcff-cc7c-4db4-8b32-102de87bac18.png" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657259614756-d5d1c20e-ba54-47de-bd62-8a5ae2270d98.png" alt="img"></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 交换机</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"aomsir.fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 队列1</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.queue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 绑定交换机和队列1</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">fanoutBinding1</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span><span class="token class-name">Queue</span> fanoutQueue1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fanoutQueue1<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 队列2</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.queue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 绑定交换机和队列2</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">fanoutBinding2</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span><span class="token class-name">Queue</span> fanoutQueue2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fanoutQueue2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout.queue1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenFanoutQueue1</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1接收到fanout.queue1的消息：【"</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout.queue2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenFanoutQueue2</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2接收到fanout.queue2的消息：【"</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendFanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 交换机</span>    <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">"aomsir.fanout"</span><span class="token punctuation">;</span>    <span class="token comment">// 消息</span>    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello everyone!"</span><span class="token punctuation">;</span>    <span class="token comment">// 发送消息到交换机</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h2><ul><li>发布订阅，交换机根据规则将消息路由到指定队列，称为路由模式</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657263694901-a56d8c9f-3d43-4d4e-a12b-db5f0cc3a0ca.png" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657263836902-154d4742-4e6a-45fe-9c5b-62927acc8115.png" alt="img"></li><li>消费者直接使用注解的方式去声明交换机和绑定队列，不使用bean</li><li>发送消息的时候指定key</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"direct.queue1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"aomsir.direct"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenDirectQueue1</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者接收到direct.queue1的消息：【"</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"direct.queue2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"aomsir.direct"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenDirectQueue2</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者接收到direct.queue2的消息：【"</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAmqpTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendDirectExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 交换机</span>        <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">"aomsir.direct"</span><span class="token punctuation">;</span>        <span class="token comment">// 消息</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello blue!"</span><span class="token punctuation">;</span>        <span class="token comment">// 发送消息到交换机</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h2><ul><li>和DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以.切割</li><li>话题类型交换机</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657266555866-5551a748-687f-47f0-80f5-4a04499d305a.png" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1657266602218-fd1ea464-8c9c-4941-a7e2-7c50d6db5fc6.png" alt="img"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2024/12/14/Ajax/"/>
      <url>/2024/12/14/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>Ajax俗称 异步JavaScript与XML</p><ul><li>能够轻松实现页面与服务器的交互</li><li>用户场景：注册时检测用户名，搜索提示，</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h2><p>原生的Ajax使用起来较为复杂，jQuery对其进行了一次封装，用起来稍微简单些</p><h3 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h3><p>这个函数专门用于发送get请求</p><ul><li><code>$.get(url,[date],[callback])</code>-url-参数-请求成功的回调函数</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnGET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击发送GET请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnGET'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnGET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnGET'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h3><p>这个函数用于发送post请求的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnPOST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnPOST'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span><span class="token literal-property property">bookname</span><span class="token operator">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span>                     <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">'Jsckot'</span><span class="token punctuation">,</span>                     <span class="token literal-property property">publisher</span><span class="token operator">:</span> <span class="token string">'xxx'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>这个就是jQuery所带的Ajax请求,比较综合</p><p>Ajax的GET请求与POST请求比较类似</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>   <span class="token comment">//请求类型，GET/POST</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>   <span class="token comment">//请求的url</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//这次请求所携带的参数</span>  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">//请求成功后的回调函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btnAjax"</span><span class="token operator">></span>点击发送Ajax请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnAjax'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监听表单提交事件"><a href="#监听表单提交事件" class="headerlink" title="监听表单提交事件"></a>监听表单提交事件</h3><p>如下所示</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>SUBMIT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'监听成功！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组织表单提交默认行为"><a href="#组织表单提交默认行为" class="headerlink" title="组织表单提交默认行为"></a>组织表单提交默认行为</h3><p>表单提交默认行为就是点提交后会自动跳转和提交</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>SUBMIT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用serialize-获取表单提交数据"><a href="#使用serialize-获取表单提交数据" class="headerlink" title="使用serialize()获取表单提交数据"></a>使用serialize()获取表单提交数据</h3><p>使用这个之前一定要下面几种设置</p><ul><li>表单添加id</li><li>每个表单项添加name属性</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fm1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fm1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>不多讲</p><h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><p>封装了get，post，ajax请求</p><ul><li>创建xhr对象</li><li>调用open函数</li><li>设置Content-Tyle属性-POST必须写，GET不需要</li><li>调用send函数发送请求</li><li>监听onreadystatechange事件</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><h2 id="文件上传进度"><a href="#文件上传进度" class="headerlink" title="文件上传进度"></a>文件上传进度</h2><p>用到xhr的<code>upload.onprogress</code>属性</p><p>动态上传可以使用bootstarp</p><h3 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h3><p>方便些</p><h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><p>它是一个专注网络请求的库，体积小很多，相比原生的XHR，这个更方便易用</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1647759410500-b9856109-c4de-4e7d-b6a6-0a2093d5b800.png" alt="img"></p><ul><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1647759437684-4042c7af-1f22-4084-8f61-c95270bff648.png" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1647759478121-7c0c03eb-8d76-4064-92ac-e2478651b74a.png" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2145785/1647759580621-534ff41b-4cb2-4845-a7c7-5c9a82282e82.png" alt="img"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
